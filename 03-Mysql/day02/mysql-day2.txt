Day01 回顾
1. MySQL 特点:
	1. 关系型数据库
	2. 跨平台
	3. 支持多种开发语言
	4. 开源
2. 启动服务
	sudo /etc/init.d/mysql start|restart|stop|status
	mysql -h主机名 -u用户名 -p密码
		本地连接可以省略-h
	数据都是以文件形式存储在/var/lib/mysql
	MySQL 核心是关系(二维表)
3. 基本SQL命令
	show databases;
	create database 库名 character set utf8;
	use 库名;
	create table 表名(字段1 数据类型,字段2 数据类型,...);
	insert into 表名 values(记录1),(记录2),...;
	insert into 表名(字段1,字段2,...) values(值1),()...;
	select * from 表名;
	select * from 表名 where 条件;
	select 字段1,字段2 from 表名 where 条件;
	show tables;
	drop table 表名;
	drop database 库名;
4. 更改默认字符集
	1. sudo -i
	2. cd /etc/mysql/mysql.conf.d
	3. cp mysqld.cnf mysqld.cnf.bak
	4. vi mysqld.cnf
			[mysqld]
			character_set_server = utf8
	5. sudo /etc/init.d/mysql restart
	6. mysql -uroot -p123456
5. 数据类型
	1. 数值类型
		1. 整型
			1. int 大整型
			2. tinyint 微小整型
				1. 有符号 signed -128 ~ 127
				2. 无符号 unsigned 0 ~ 255
			3. smallint 小整形
			4. bigint 极大整型
		2. 浮点型
			1. float(5,2)
			2. decimal(5,2)
				insert into info values("xiaoming",98),("xiaohong",96.12345);
			注意 :
				1. 浮点型,插入整数时,小数位会自动补0;
				2. 小数位如果多于指定位,会自动对指定位的下一位四舍五入
	2. 字符类型
		1. char(定长) : 性能高,浪费空间
		2. varchar(变长) : 性能低,节省空间
		3. text / blob
		注意 :
			1. char(m),varchar(m)
				m表示最大字符数,超出长度则无法存储
			2. 区别 :
				定长存储,会直接分配固定的存储空间 ;
				变长存储,会根据实际的字符数,分配存储空间
			3. 数值类型的显示宽度与字符类型的显示宽度 :
				数值类型的显示宽度,不影响存储空间
				字符类型的显示宽度,限制最大字符数,超出无法存储
Day02
1. MySQL 数据类型
	1. 数值类型
	2. 字符类型
	3. 枚举类型
		1. 枚举 enum, 是一个字符串对象,可以将一些不重复的字符串存储成一个预定义的集合;字段值必须从这个集合中选取,才是合法值. 最多可以列举 65535 个值,
		枚举经常用来实现单选 :
			et :
				create table userinfo(id int,name char(10),sex enum('男','女','保密'));
			特点 :
				枚举中的数据,从左到右会自动分配索引,从1开始,查询数据时,可以根据字符串值进行查询,也可以根据索引值查询
				et :
					select * from userinfo where sex='男';
					等价于
					select * from userinfo where sex=1;
		2. 集合
			集合是一种特殊的枚举类型,可以指定一个选项列表,但是字段值可以取范围内的多个值.可以实现多选.类型名使用set表示
			et : 
				create table couseTab (sportcourse set('篮球','足球','羽毛球'));
				insert into couseTab values('篮球,足球,羽毛球');
	4. 日期时间类型
		1. date : "YYYY-MM-DD"
		2. time : "hh:mm:ss"
		3. datetime : "YYYY-MM-DD hh:mm:ss"
		4. timestamp : "YYYY-MM-DD hh:mm:ss"
		注意 :
			1. datetime : 给NULL,默认返回NULL
			2. timestamp : 给NULL,默认返回系统当前时间
			3. 日期格式 :
				"2000/11/11 10:10:10"
				"20081010121212"
	5. 日期时间函数
		1. now() 返回当前系统时间
		2. curdate() 返回当前日期(年月日)
		3. curtime() 返回当前时间(时分秒)
		4. year(date) 返回指定日期的年份
		5. date(date) 返回指定日期的年月日
		6. time(date) 返回指定日期的时分秒
		练习 :
			1. 插入3条数据
			2. 查找2018-10-10有哪些用户充值了?
				select name from t1 where date(cztime) = "2018-10-10";
			3. 查找2018年5月的充值信息
				select * from t1 where date(cztime) >= "20180501" and date(cztime) <= "20180531";
			4. 查找2018年8月30日10:00-12:00的充值信息
				select * from t1 where date(cztime)="20180830" and time(cztime)>="100000" and time(cztime)<="120000";
	6. 日期时间运算
		1. 语法格式 
			 select * from 表名 where 字段名 运算符 (时间-interval 时间单位)
			 时间单位 :
			 et :
			 1 day | 2 hour | 1 minute | 1 year | 1 month | 50 second
		2. 练习 :
			1. 查询1天以内的充值记录
				select * from t1 where cztime > (now()-interval 1 day);
				et :
					 age > 20
			2. 查询1年前的充值记录
				select * from t1 where cztime < (now()-interval 1 year);
			3. 查询1天以前,3天以内的充值记录
				select * from t1 where cztime < (now()-interval 1 day) and cztime > (now()-interval 3 day);
		3. 表示未来的时间节点
			et :
				从当前系统时间向后推算一年,明年
				now()-interval -1 year
2. 表结构操作(操作字段)
	1. 语法 : alter table 表名 执行动作;
	2. 添加字段 (add)
		//直接在最后一列的位置添加新字段
		alter table 表名 add 字段名 数据类型;
		//在第一列的位置添加新字段
		alter table 表名 add 字段名 数据类型 first;
		//在指定字段的后面添加新字段
		alter table 表名 add 字段名 数据类型 after 已有字段名;
	3. 删除字段(drop)
		alter table 表名 drop 字段名;
	4. 修改数据类型(modify)
		alter table 表名 modify 字段名 新数据类型;
	5. 表的重命名(rename)
		alter table 表名 rename 新表名;
	练习 :
		1. 创建库 studb;
			create databse studb;
			use studb;
		2. 在库中创建表t1,字段 :
			create table t1(name char(10),
			age tinyint unsigned;
			phnumber char(11));
		3. 查看表结构
			desc t1;
		4. 在表中第一列的位置插入一个id字段
			alter table t1 add id int first;
		5. 修改phnumber的数据类型为int
			alter table t1 modify phnumber int;		
		6. 在最后一列的位置插入address字段
			alter table t1 add address char(20);
		7. 删除age字段 
			alter table t1 drop age;
		8. 查看表结构
			desc t1;
			id name phnumber address
		9. 把表名修改为tab1;
			alter table t1 rename tab1;
3. 表记录管理
	1. 插入数据 insert into 表名 values(),(),...;
	2. 查询数据 select * from 表名 where 条件;
	3. 删除数据
		1. delete from 表名 where 条件;
		2. 如果省略where条件,
			delete from 表名;
			表示清空所有记录
	4. 更新数据
		1. update 表名 set 字段1=值,字段2=值,... where 条件;
		2. update 必须写where条件
	练习 (hero):
		1. 查找所有蜀国人的信息
			select * from hero where country="蜀国";
		2. 查找所有女英雄的姓名,性别,国家
			select name,sex,country from hero where sex="女";
		3. 把id=2的记录改为 典韦  性别 男,国家:魏国
			update hero set name="典韦",sex="男",country="魏国" where id=2;
		4. 删除所有蜀国英雄
			delete from hero where country="蜀国";
		5. 把貂蝉的国家改成魏国
			update hero set country="魏国" where name="貂蝉";
		6. 删除所有数据
			delete from hero;
4. 运算符
	1. 数值比较/字符比较
		1. 数值比较 : = != > >= < <= 
		2. 字符比较 : = !=
		3. 练习 :
			1. 查找攻击力超过150的英雄的名字和攻击值
				select name,gongji from sanguo where gongji > 150;
			2. 将赵云的攻击值设置为360,防御值设置为68
				update sanguo set gongji=360,fangyu=68 where name='赵云';
	2. 逻辑运算符
		1. 条件1 and 条件2; (查询同时满足两个条件的数据)
		2. 条件1 or 条件2;
			查询满足条件1或者是满足条件2的数据
		练习 :
			1. 找出攻击值高于200的蜀国英雄的名字和攻击力
				select name,gongji from sanguo where gongji > 200 and country = "蜀国";		
			2. 将吴国英雄攻击值为110的英雄,改为攻击力100,防御值60
				update sanguo set gongji=100,fangyu=60 where country="吴国" and gongji=110;

			3. 查找蜀国和魏国的英雄信息
				select * from sanguo where country="蜀国" or country="魏国";
	3. 范围内比较
		1. between 值1 and 值2
			设置范围在 值1 和 值2 之间
		2. where 字段名 in(值1, 值2, 值3,...)
			匹配字段值在 in 给出的范围内的数据
			et :
				where age in(22,23,24,25);
		3. where 字段名 not in(值1,值2,..);
			匹配字段值不在指定范围内的数据
		练习 :
			1. 查找攻击值在100-200之间的蜀国英雄信息
				条件1 : 攻击值100-200
				条件2 : 蜀国
				select * from sanguo where 
				gongji between 100 and 200 
				and country="蜀国";

			2. 查找蜀国和吴国以外的国家中,女英雄信息
				条件1 : 国家不在蜀国和吴国中
				条件2 : 女
				select * from sanguo where
				country not in('蜀国','吴国')
				and sex="女";

			3. 查找id=1,3,5的蜀国英雄和貂蝉的信息
				条件1 : id= 1,3,5
				条件2 : 蜀国
				条件3 : name="貂蝉"
				select * from sanguo where
				id in(1,3,5) and country="蜀国"
				or name="貂蝉";
	4. 匹配空,非空
		1. 匹配空 : where 字段 is null;
		2. 匹配非空 : where 字段 is not null;
		注意 :
			1. is null 和 is not null 主要用来匹配字段值等于NULL的数据
			2. 空字符串可以直接使用 = 来匹配
			et :
				where name='';
				where name is null;
	5. 模糊查询
		1. 格式 : where 字段名 like 表达式
		2. 表达式 :
			1. _ : 表示匹配1个字符
			2. % : 表示匹配0到多个字符
		3. 示例:
			1. 查找姓名包含2个字符(含)以上的数据
				select * from sanguo where name like '_%_';
			2. 匹配所有数据
				select name from sanguo where name like "%";
				注意 :
					NULL值不会被匹配出来
					空字符串表示0个字符,会被正常匹配
			3. 匹配姓名为3个字符的数据
				where name like '___';
			4. 匹配姓赵的数据
				where name like '赵%_';
				et :
					select name from sanguo where name like '赵%_';
				更改查询结果中的显示字段
					select name as n from sanguo where name like '赵%_';
5. SQL 查询
	1. 完整的查询语句由以下关键字组成
		顺序为书写顺序,序号是mysql执行顺序
		3. select
		1. where
		2. group by
		4. having
		5. order by
		6. limit
	2. order by : 对查询结果进行排序
		1. 格式 : ...order by 字段名 ASC(升序)/DESC(降序)
		2. 示例 :
			1. 将英雄按照防御值从高到低排列
				select * from sanguo order by fangyu DESC;
			2. 将蜀国英雄按照攻击值从高到低降序排列
				select * from sanguo where country="蜀国" order by gongji DESC;
			3. 将魏国和蜀国英雄中名字为3个字的,按照防御值升序排列
				select * from sanguo where country in ('魏国','蜀国') and name like "___" order by fangyu ASC;
	3. limit 分页查询
		永远放在SQL语句的最后书写
		分页用来控制显示多少条结果中的数据
		1. 语法 :
			1. limit n; 表示显示n条数据
			2. limit m,n; 表示从第m+1条记录开始显示,显示n条
				et :
					limit 2,3 : 显示第3,4,5 三条数据
			3. 示例 :
				1. 查找蜀国英雄中,防御值倒数第2名至倒数第四名的英雄记录
				select * from sanguo where country="蜀国" order by  fangyu ASC limit 1,3; 
				2. 查找蜀国英雄中攻击值前3名且名字不为NULL的英雄信息.
					select * from sanguo where country="蜀国" and name is not null order by gongji DESC limit 3;
				3. 显示查询结果中第20-25条数据
					limit 19,6;
	4. select 查询
		select *
		select 字段 
		select 聚合函数 where...
		1. 聚合函数
			最大值 最小值 求和 平均值 计数


















































