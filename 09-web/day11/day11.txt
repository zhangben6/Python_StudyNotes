复习 :
1.  内置对象
	1. Array
		length
		join() reverse() push() pop() unshift() shift()
		toString() sort() forEach(function (elem,index){})
	2. String
		length 按下标存取元素
		1. toUpperCase() toLowerCase()
		2. charAt(index) charCodeAt(index)
		3. indexOf(str,fromIndex) lastIndexOf(str,fromIndex)
		4. substring(startIndex,endIndex)
			[startIndex,endIndex-1]
		5. split(seperator)
			例 :
				var date = "2011-11-11";
				var arr = date.split('-');
		6. match(substr/regExp) 返回结果数组
		   replace(substr/regExp,newContent) 返回替换后的新字符串
	3. RegExp
		1. /知乎/g
		   /\w{2}/ig
		   new RegExp("正则格式",'修饰符')
		2. lastIndex 下一次匹配的起始下标
		   test(str)
	4. Math
		Math.random()  [0,1)
		Math.ceil(x)    向上取整
		Math.floor(x)   舍弃小数位
		Math.round(x)   四舍五入
	5. Date
		1. new Date()  获取当前的系统日期时间
		   new Date("") 根据指定日期时间,初始化日期对象
		2. getFullYear()
		   getMonth() 0-11表示月份
		   getDate() 日期 
		   getDay()  星期 0-6 (周日-周六)
		   getHours()
		   getMinutes()
		   getSeconds()
		   toLocaleString()
		   toLocaleDateString() 年月日
		   toLocaleTimeString() 时分秒 星期
------------------------------------------------------

day11

1. 外置对象
	1. window 
		1. 全局变量和全局函数都是window对象的属性和方法,可以通过点语法访问
		2. window对象在浏览器打开页面时自动创建,使用时可以省略
		3. 方法
			alert(str)
			prompt(str) 返回输入内容(字符串)
			confirm(str)返回true/false
			close() 关闭当前窗口
			var timerId = setInterval(func,interval);
			clearInterval(timerId);
			var timerId2 = setTimeout(func,timeout);
			clearTimeout(timerId2);
		4. 属性
			1. 大部分window对象的属性,又是对象类型,包含自身的属性和方法
				例 : document screen location history...
			2. screen 屏幕对象
				保存与屏幕相关的信息
				属性 :
					width/height : 获取屏幕宽高
					availWidth/availHeight : 实际可用的屏幕宽高(减去任务栏之后的尺寸)
			3. history 
				保存当前窗口访问过的URL信息
				属性 :
					length:获取当前窗口访问过的URL数量
				方法 :
					back():相当于浏览器的后退按钮
					forward():相当于前进按钮
					go(num):参数可正可负,正值代表前进,负值代表后退
				注意 : 
					1. 方法使用时,都是从当前页面在history中的位置开始,前进或者后退
					2. 窗口的历史记录数量,跟随url变化自动添加,访问顺序决定历史记录的顺序.重复切换页面,不会影响历史记录的顺序和数量
			4. location
				操作当前窗口地址栏的信息
				属性 :
					href : 用来获取或设置当前窗口地址栏URL的信息;如果赋值,页面重定向,发生内容跳转
				方法 :
					reload(param)
					重载页面,相当于刷新
					参数 : true/false
						默认为false,从缓存中重载页面
						true 从服务器根目录重新请求页面
	2. DOM - Document Object Model
		1. 文档对象模型,重主要围绕document对象,实现对网页文档内容的操作
		2. 在JS中,认为HTML文件本身就是一篇文档,文档的层次结构,对应在JS中表现为节点树.
			节点 : 网页在解析过程中,其中的标签,标签属性,文本内容都会被封装成一个节点
			节点分类 :
				1. 元素节点 -> 标签名
				2. 属性节点 -> 标签属性
				3. 文本节点 -> 文本内容
				-----------------------
				4. 文档节点 -> document
				5. 注释节点 -> 网页中的注释
			节点操作 :
				1. 获取节点
				2. 读取和修改节点内容
				3. 创建节点
				4. 添加节点
				5. 删除节点
		3. 获取元素节点
			1. document.getElementsByTagName('div');
			   作用 : 通过标签名获取元素节点
			   返回值 : 节点列表(数组)
			   参数 : 字符串的标签名
			2. document.getElementsByClassName('className');
				作用 : 根据class属性值获取元素节点的数组
				返回 : 节点列表
				参数 : 字符串的class属性值
			3. document.getElementById('id属性值');
				作用 : 根据id属性值获取具体的元素节点
				返回 : 节点对象
				参数 : id属性值
			4. document.getElementsByName("name");
				作用 : 根据name属性值获取节点数组
			练习 :
				创建文本框和按钮,div
				点击按钮时,获取文本框输入的内容,以一级标题的形式显示在div中 innerHTML
			元素节点常用属性 :
				1. innerHTML
					读取或设置元素节点的标签内容,可以识别HTML标签语法
				2. innerText
					读取或设置元素节点的文本内容,不能识别标签语法
				3. value
					针对表单控件,表示表单元素的值
		4. 操作标签属性
			1. getAttribute('attrName')	
			   根据属性名,获取属性值
			2. setAttribute('attrName','attrValue');
			   为元素节点添加标签属性
			3. removeAttribute('attrName');
			   移除指定属性
			4. 标签属性也是元素节点对象的属性,可用点语法直接访问
				例 :
					h1.id = "d1";
					//避免与JS关键字冲突,标签属性class对应的属性名使用className表示
					h1.className = "c1";
					//移除属性值
					h1.id = null;
			练习 :
				创建超链接,初始链接地址为百度
				创建按钮,点击时修改超链接的链接地址,改为"http://www.tmooc.cn"
		5. 操作元素节点的样式
			1. 为元素添加id/class属性,对应选择器样式	例 :
					h1.setAttribute('class','c1');
					h1.className = "c1";
			2. 操作行内样式
				例 :
					<h1 style="color:red;">
				通过元素访问style属性,返回样式对象
					h1.style : 样式对象
				样式对象中包含全部的CSS属性,可以通过点语法直接操作
				注 :
					通过样式对象点语法访问CSS属性,对于带有连接符的属性一律更名为驼峰标识;
					采用字符串为CSS属性赋值
					h1.style.fontSize = "20px";
				练习 :
					1. 创建 div 文本框 按钮
					要求用户名必须在6-18位之间
					2. 点击按钮时,获取输入内容,进行验证
					验证通过,设置div显示文本"用户名合法",并设置字体颜色为绿色
					用户名不合法,设置div以红色文本色显示"不合法"














