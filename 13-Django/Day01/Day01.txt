Django
1.Django框架的介绍
	2005年发布，采用Python语言编写的开源框架
	早期的时候Django主要做新闻以及内容管理的网站
	Django中自带强大的后台管理功能

	版本：2.1.5
	使用：1.11

	官网:http://www.djangoproject.com
	中文文档:http://djangobook.py3k.cn/2.0/

2.Django的框架模式
	MTV
	 M -- Models
	 T -- Templates
	 V -- Views
3.Django的安装
	1.查看已安装的版本
		1.进入到python交互模式
			python3 / ipython3
		2.输入 import django
		3.输入 django.VERSION
	2.安装
		使用 pip3 
			pip3 install django
			(安装Django的最新版本)

			pip3 install django==1.11.8
			(安装Django的指定版本)
4.Django框架的使用
	1. 创建项目的指令
		指令：django-admin
		语法：django-admin startproject 项目名
	2.Django项目的目录结构
		1.manage.py
			功能：包含项目管理相关的子命令
				如：
					启动服务:runserver
					创建应用:startapp
					创建管理员:createsuperuser
					数据迁移:migrate
					.... ....
		2.主文件夹(与项目名称一致的文件夹)
			1. __init__.py
				项目初始化文件，服务启动时自动运行
			2.wsgi.py
				Web服务网关接口的配置文件
				部署项目时使用
			3.urls.py
				项目的基础路由配置文件
				所有动态路径必须走该文件进行匹配
			4.settings.py
				功能：项目的主配置文件，启动服务时自动调用
				1.BASE_DIR
					作用：表示当前项目的绝对路径
				2.DEBUG
					作用：是否启用条用模式
					取值：
						1.True
							使用调试模式
							(开发阶段推荐使用)
						2.False
							不使用调试模式
							(生产环境中要使用)
				3.ALLOWED_HOSTS
					作用：设置允许访问到本项目的地址列表
					取值：
						1.如果为空
							表示只有localhost或127.0.0.1能访问
						2.['*']
							任何表示本机的地址都能访问当前项目
							如:
								localhost / 127.0.0.1 / 0.0.0.0 / IP地址
							
							注意：如果要在局域网内被访问的话
								./manage.py runserver 0.0.0.0:端口号
				4.INSTALLED_APPS
					作用：指定已安装的应用
				5.MIDDLEWARE
					作用：注册中间件
				6.TEMPLATES
					作用：指定模板的配置信息
				7.DATABASES
					作用：指定数据库的配置信息
				8.LANGUAGE_CODE
					作用：指定语言设置
					取值：
						中文：zh-Hans
				9.TIME_ZONE
					作用：指定时区
					取值：
						中国时区：Asia/Shanghai
5.URL的使用
	1.urls.py
		默认在主文件夹中，主路由配置文件，包含最基本的路由-视图的映射关系
		该模块文件中会包含 urlpatterns 的列表，用于描述路由-视图的映射
		在urlpatterns中，通过若干 url() 来表示具体的路由-视图映射关系
	2.url() 的语法
		from django.conf.urls import url
		语法：
			url(regex,views,kwargs=None,name=None)
				1.regex:字符串类型，匹配的请求路径，可以是正则
				2.views:指定地址所对应的视图处理函数的名称
				3.kwargs:向views传参
				4.name:为url起别名，在地址反向解析时使用
	3.带参数的url	
		http://localhost:8000/show-02/2019
		http://localhost:8000/show-02/1996

		使用正则表达式的子组进行传参 - ()
		一个子组是一个参数，多个参数的话要使用多个子组，并且使用 / 隔开

		http://localhost:8000/show-02/xxxx
		xxxx表示的是四位数字
		urlpatterns = [
			url(r'^show-02/(\d{4})/$',views.show_02)
		]

		def show_02(request,year):
			year:表示的就是地址中的第一个子组对应的参数

		练习：
			访问地址: http://localhost:8000/show_03/四位整数/两位整数/两位整数
			最终输出：生日为:xxxx年xx月xx日

			ex: http://localhost:8000/1977/11/11
			最终输出：生日为:1977年11月11日
6.Django中的应用 - app
	1.什么是应用
		应用是WEB项目中的一个独立的业务模块，可以包含自己的路由，视图，.... ....

		在Django中，主文件夹不再处理用户的具体请求。主文件夹的主要工作就是项目的初始化以及请求的分发(分布式请求处理)，具体的请求由应用(app)进行处理的
	2.创建 & 配置应用
		1.创建应用的指令
			./manage.py startapp 应用名称
			ex:
				./manage.py startapp music
		2.配置应用
			在 settings.py 中进行应用的注册
			INSTALLED_APPS = [
				... ...,
				'自定义的应用名称'
			]
		3.应用的结构组成
			1.migrations 文件夹
				保存数据迁移的中间文件
			2.__init__.py
				应用的初始化文件
			3.admin.py
				应用的后台管理配置文件
			4.apps.py
				应用的属性配置文件
			5.models.py
				与数据库相关的模型映射类
			6.tests.py
				应用的单元测试文件
			7.views.py
				定义视图处理函数的文件
		4.分布式路由系统
			如果访问路径是：
			http://localhost:8000/music/xxx
			则将请求转交给music应用中的urls进一步处理

作业：
	1.创建一个Django项目 - DjangoDemo01
	2.创建以下应用们，并注册:
		1.创建 index 应用
		2.创建 music 应用
		3.创建 sport 应用
		4.创建 news  应用
	3.创建分布式路由访问系统
		主文件夹只做路由的分发
		每个应用只处理与自己相关的业务(路由和视图)

		1.localhost:8000/index/index 
			交给 index 应用中的 index() 函数处理
		2.localhost:8000/music/index
			交给 music 应用中的 index() 函数处理
		3.localhost:8000/sport/index
			交给 sport 应用中的 index() 函数处理
		4.localhost:8000/news/index
			交给 news  应用中的 index() 函数处理
