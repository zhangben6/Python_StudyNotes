day13回顾:
自定义模块
   标识符.py  不能是123.py
   导入的语句:
      import 语句
      from import 语句
      from import * 语句

  搜索模块的路径:
    1. 索引内建模块
    2. 当前运行时路径
    3. 搜索sys.path里提供的路径

  mymod.py ---> mymod.pyc ----> python3

模块的预置属性
  __doc__属性
  __file__属性
  __name__属性
    主模块 '__main__'
    非主模块 绑定 '模块名'

__all__列表
  作用是限定在from import *导入时,只导入__all__列表
  内的属性

模块的隐藏属性
  _下划线开头的属性 在 from import *导入时不会被导入

随机模块
  名字: random
    函数:
      random.random()
      random.randint()
      random.randrange(...)
      random.sample()
      random.choice()
      ....

包 package
  包的导入:
    import 
    from import
    from import *
  示例:
    import 包名.xxx.yyy.zzz
    from 包名.xxx.yyy.zzz import aaa
    from 包名.xxx.yyy.zzz import *

__init__.py
  作用:
    包的内容:
      函数,数据,文档字符串
__init__.py 里的 __all__列表
  告诉 from import * 语句导入的内容
  __all__ = ['contra', 'tanks']

包的相对导入
  只能用于两条语句:
    from 相对路径 import 语句
    from 相对路径 import *语句
  相对路径:
     .
     ..
     ...

异常 exception (基础)
什么是错误
  错误是指由于逻辑或语法等导致程序无法正常执行的问题

特点
  无法预知

什么是异常
  异常是程序出错时标识的一种状态.当导常发生时,程序不会再
  向下执行,而转去调用此函数的地方待处理此错误并恢复为正
  常状态
作用:
  用作信号通知,通知上层调用者有错误产生需要处理

程序有两种状态:
   正常状态/异常状态

try语句 的两种语法
  try-except语句
  try-finally语句

try-except语句的语法
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量1]:
        异常处理语句1
    except 错误类型2 [as 变量2]:
        异常处理语句2
    except (错误类型3, 错误类型4) [as 变量3]:
        异常处理语句3
    ...
    except:
        异常处理语句other
    else:
        末发生异常的语句
    finally:
        最终语句

作用:
  偿试捕获错误,得到异常通知,将程序由异常状态转换为正常状态并
  继续执行
说明:
  as 子句是用于绑定错误对象的变量,可以省略
  except 子句可以有一个或多个,但至少要有一个
  else 子句最多只能有一个.也可以省略
  finally子句最多只能有一个.也可以省略

 示例见:
   try_except.py

练习:
  写一个函数 get_score() 来获取学生输入的成绩
  信息(0-100)的整数,如果输入出现异常,则此函数返回0,
  否则返回用户输入的成绩
    def get_score():
        ....  # 此处自己实现(try语句可以加在函数内部)

    score = get_score()
    print("学生的成绩是:", score)

python3 中全部的错误类型:
  文档参见:
    python_base_docs_html/python全部的异常类型.html


try-finally 语句
  语法
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    finally子句不可以省略
    一定不存在except子句
  作用:
    通常用try-finally语句来做触发异常时必须要处理的事情
    无论异常是否发生,finally子句都会被执行
  注:
    try-finally语句不会改变程序的(正常/异常)状态



示例:
  请问以下语句在做什么事情:
    def get_number():
        s = input("请输入整数:") or '1'
        i = int(s)
        return i

    print(get_number())
    改写上述程序,自己制定规则,让程序不会出崩溃的现象

   改写后:
    def get_number():
        s = input("请输入整数:")
        try:
            i = int(s)
        except:
            i = 0
        return i


raise 语句
    作用:
      触发一个错误,让程序进入异常状态
      发送错误通知给调用者
    语法:
      raise 异常类型
      或
      raise 异常对象
      或
      raise  # 重新触发上一次异常
    示例:
      raise ValueError  # 
      raise ValueError("???????")
    示例见:
      raise.py
      raise2.py

练习:
  写一个函数 get_age() 用来获取一个人的年龄信息
  此函数的规定用户只能输入1~140之间的整数,如果用户
  输入其它的数据则直接触发ValueError类型的错误通知
  如:
    def get_age():
        ....
    
    try:
        age = get_age()
        print("用户输入的年龄是:", age)
    except ValueError as err:
        print('用户输入的不是1~140之间的整数'
              ',获取年龄失败')

assert语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)
  作用:
    当真值表达式为False时,用错误数据创建一个
    AssertionError类型的错误,并进入异常状态
    通常用来故意制造一个错误

  等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)
  示例见:
    assert.py

异常中的语句小结:
  try-except 语句 
      用于捕获(接收)错误通知,把异常状态转为正常状态
  try-finally语句
      用于执行在任何状态(正常/异常)都必须要执行的语句
  raise 语句
      触发错误(发送错误通知),让程序进入异常状态
  assert 语句
      根据条件触发AssertionError类型的错误通知
  

迭代器 Iterator
什么是迭代器
  迭代器是访问可迭代对象的工具
  迭代器是指iter(obj) 函数返回的对象(实例)
  迭代器可以用next(it) 函数获取可迭代对象的数据

迭代器函数iter和next
iter(iterable) 从可迭代对象中获取一个迭代器,iterable
         必须是能提供一个迭代器的可迭代对象
next(Iterator)  从迭代器iterator中获取下一个记录,如
        果无法获取下一条记录,则触发StopIteration异常

说明:
  迭代器只能往前取值,不会后退
  用iter函数可以返回一个可迭代对象的迭代器

示例:
  L = [2, 3, 5, 7]
  it = iter(L)  # 从L对象中获取一个迭代器
  print(next(it))  # 2
  print(next(it))  # 3
  print(next(it))  # 5
  print(next(it))  # 7
  print(next(it))  # StopIteration 异常
  # 用迭代器访问 range() 函数返回的整数序列生成器
  it = iter(range(1, 10, 3))
  next(it)  # 1
  next(it)  # 4
  next(it)  # 7
  next(it)  # StopIteration

  示例见:
    iterator.py

练习:
  有一个集合
    s = {'唐僧', '悟空', '八戒', '沙僧}
    # 用for语句来遍历所有元素如下:
    for x in s:
        print(x)
    else:
        print("遍历结束")
    # 请将上面的for语句改写为while语句和迭代器实现



练习:
  1. 一个球从100米高空下落,每次落地后反弹高度为原高度
    的一半,再落下,写程序:
      1) 算出皮球在第10次落后反弹多高
      2) 算出皮球在第10次反弹后经过多少米路程

  2. 分解质因数.输入一个正整数,分解质因数
    如 输入: 90 则打印: 90=2*3*3*5
    (质因数是指最小能被原数整除的素数(不包括1))

  3. 修改原学生信息管理程序,加入异常处理语句,让程序
    在任何情况下都能按逻辑正常执行.
      如输入成绩,年龄等都不会导致程序崩溃






