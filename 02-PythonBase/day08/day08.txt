day07回顾
  两个容器类
    元组 tuple
    字典 dict

元组
  可以理解成不可变的列表(序列容器)
  字面值的创建方法
    ()   20,   (20,)   100,200,300 (1,2,3)
  构造函数的创建方法:
     tuple()   , tuple(可迭代对象)
元组的运算:
   +  +=   *    *=  
   < <=  > >= == != 
   in / not in 运算符
   索引/切片 取值(不支持赋值)


字典 dict
   可变的, 可以存储任意类型的,无序的容器
   键-值对(key-value)
   字典的键不可改变且不可重复
创建字面值的创建方式
  {}   {1:"一"}   {1:"一", 2:'二'}
推导式方式:
  {键表达式 : 值表达式 for 变量 in 可迭代对象 if...}
构造函数方式:
  dict()   dict(可迭代对象)  dict(关键字传参)
           dict(iterable)  dict(**kwargs)

运算:
  变量 = 字典[键]  # 取值
  字典[键] = 表达式   # 添加/修改键所对应的值
del 语句 用来删除字典的键值对
   del 字典[键]

  in , not in 运算符

字典中的方法
  D.clear()
  D.pop(key)  移除
  D.get()
  D.copy
  D.keys()
  D.values()
  D.items()
  ...

     



day08笔记:
集合 set
  集合是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构,集合中的数据没有先后关系
  集合内的元素必须是不可变对象
  集合是可迭代的(可以用for语句遍历)
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建集合的构造函数
  set()  创建一个空的集合对象(不能用{}来创建空集合)
  set(iterable) 用可迭代对象来创建新的集合对象

  示例:
    s = set()   # s绑定空集合set()
    s = set(range(1, 5))  # s = {1, 2, 3, 4}
    s = set("hello")  # s = {'e', 'o', 'h', 'l'}
  注:
    非空集合用 {} 括起来,内部的各个元素用逗号(,)分隔开

字面值方式来创建非空集合
    s = {1, 2, 3, 4}
    s = set("ABCCBA")
    s = set({1:"一", 3:"三", 8:"八"})
    s = set([1, 3.14, "ABC"])
    s = {True, None, "ABC", (1, 2, 3)}
    s = {True, None, "ABC", [1, 2, 3]}  # 出错

集合的运算:
   交集 &   并集|  补集-  对称补集^  子集<  超集>

& 生成两个集合的交集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 & s2  # s3 = {2, 3}

| 生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 | s2  # s3 = {1, 2, 3, 4}

- 生成两个集合的补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  # 生成属性s1但不属于s2的所有元素的集合
  s3 = s1 - s2  # s3 = {1}
  s3 = s2 - s1  # s3 = {4}

^ 生成两个集合的对称补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 ^ s2  # {1, 4}  


< 判断一个集合是另一个集合的子集
> 判断一个集合是另一个集合的超集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s2 < s1  # True
  s1 > s2  # True
  s3 = {3, 4, 5}
  s1 > s3  # False
  s1 < s3  # False
  s1 == s3  # False

== !=  判断集合相同或不同
  {1, 2, 3}  != {3, 2, 1}  # False

>= <= 略  

in , not in 运算符
  等同于列表的in 运算符
  s1 = {1, 2, 3}
  3 in s1  # True

集合和字典的优点:
  in / not in 运算符的运算速度比较快

能用于集合的内建(built-in)函数:
  len(x)
  max(x)
  min(x)
  sum(x)
  any(x)
  all(x)

练习:
  经理有: 曹操, 刘备, 孙权
  技术员有: 曹操,孙权,张飞,关羽
  用集合求:
    1. 即是经理也是技术员的有谁?
    2. 是经理,但不是技术员的人都有谁?
    3. 是技术员,但不是经理的人都有谁?
    4. 张飞是经理吗?
    5. 身兼一职的人都有谁?
    6. 经理和技术人员共有几个人?

python3中常用的集合方法:
  文档参见:
    python_base_docs_html/set.html

集合是可迭代对象
  
集合推导式
  集合推导式是用可迭代对象创建集合的表达式

语法:
  { 表达式 for 变量 in 可迭代对象 [if 真值表达式]}
  注:[]  代表其中的内容可省略

示例:
  L = [1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7]
  s = {x ** 2 for x in L}

集合推导式的嵌套等同于列表推导式的嵌套



固定集合 frozenset
  固定集合是不可变的,无序的,含有唯一元素的集合

作用:
  固定集合可以作为字典的键,还可以作为集合的值

固定集合的构造函数 frozenset
  frozenset()  创建一个空的固定集合
  frozenset(iterable)  用可迭代对象创建一个新的固定
               集合
  示例:
    fz = frozenset()  
    fz = frozenset("hello")
    fz = frozenset([1,2,3,4,3,4,5])

固定集合的运算:
  交集 &  并集 |  补集 -  对称补集 ^
  in / not 运算符
  < <= > >= == !=
  (以上运算符用法等同于set中的用法)

固定集合的方法,相当于集合的全部方法去掉修改集合的方法 

阶段性总结:
  数据类型
    不可变的数据类型
      bool, int, float, complex, str, tuple
      frozenset, bytes(字节串,后面再学)
    可变的数据类型
      list, dict, set, bytearray(字节数组,以后再讲)
  值:
    None, False, True

  运算符:
    + - * / // % **
    > >= < <= == !=
    in / not in
    is / is not
    not   and   or
    &  |  ^  
    +(正号)  -(负号)
    []  # 索引和切片

  表达式:
    1
    True
    1 + 2 * 3
    print("hello")  # 函数调用
    L.pop(2)  # 方法调用也是表达式
    sum([1, 2, 5, 10])
    条件表达式:  x if x > y else y
    全部的推导式: 列表,字典,集合推导式(三种)

  语句:
    表达式语句(表达式单独在一行可以形成表达式语句)
      print("hello")
      "这是一段文字"
    赋值语句:
      a = 100
      a = b = c = 200
      x, y, z = 1, 2, 3
    del 语句
    if 语句
    while 语句
    for 语句
    break 语句
    continue 语句
    pass 语句

内建函数:
  len(x)
  max(x)
  min(x)
  sum(x)
  any(x)
  all(x)
  --------- 构造函数 -------
  bool(x)
  int(x)
  float(x)
  complex(x)
  str(x)
  list(x)
  tuple(x)
  dict(x)
  set(x)
  frozenset(x)
  -------------------
  abs(x)
  round(x, y)
  pow(x, y, z=None)
  --------------------
  bin(x)
  oct(x)
  hex(x)
  chr(x)
  ord(x)
  --------------------
  range(start, stop, step)
  ----基本输入输出函数--
  input(x)
  print(....)
  --------------------
  id(x)    返回内存地址
  type(x)  返回类型





函数 function
  什么是函数
    函数是可以重复执行的语句块,可以重复调用并执行
    函数是面向过程编程的最小单位
  作用:
    用于封装语句块,提高代码的重用性
    定义用户级别的函数
    提高代码的可读性和易维护性

def 语句:
  语法:
    def 函数名(形参列表):
        语句块
  作用:
    创建一个函数,将语句块打包,用函数名绑定,用来调用

  说明:
    1. 函数名的命名规则与变量名的规则相同(必须为标识符)
    2. 函数名是一个变量,它用来绑定函数
    3. 函数有自己的名字空间,在函数外部不可以访问函数内
    部的变量,在函数内部可以访问函数外部的变量,但不能对
    外部的变量赋值
    4. 语句部分不能为空.如果为空需要填允pass语句
    5. 函数如果不需要传入参数,形参列表可以为空
    
函数调用:
  语法:
    函数名(实际调用传递参数)
  说明:
    函数调用是一个表达式
    如果函数内部没有return语句,函数执行完毕后返回None
    对象的引用
  示例见:
    def.py
    mymax.py

练习:
  1. 写一个函数myadd, 此函数中的参数列表里有两个参
    数x, y此函数功能是打印 x + y 的和
    def myadd(...):
        ...
    myadd(100, 200)   # 300
    myadd("ABC", "123")  # ABC123

  2. 写一个函数print_even,传入一个参数n代表终止整数
     打印 2 4 6 8 .... n  之间的所有偶数(包含n)
     函数定义如下:
        def print_even(n):
            .... # 此处自己实现

        print_even(8)
        # 打印:
        2
        4
        6
        8
        
     

return 语句
  语法:
    return [表达式]
    注: [] 代表其中的内容可省略
  作用:
    用于函数中,结束当前函数的执行,返回到调用该函数的
    地方,同时返回一个对象的引用关系
  说明:
    1. return 语句后跟的表达式可以省略,省略后相当
       于return None
    2. 函数内部没有return语句,则函数执行完最后一条
       语句后返回None(相当于在最后加了一条return None
       语句)

  示例见:
    return.py


练习:
  1. 写一个函数 mymax, 实现返回三个数的最大值:
    如:
        def mymax(a, b, c):
            ...
        print(mymax(100, 200, 300))  # 300
        print(mymax("ABC", 'abc', '123'))  # abc


  2. 写一个函数myadd()实现给出两个数,返回这两个数的和
    如:
      def myadd(x, y):
          ....
      a = int(input("请输入第一个数: "))
      b = int(input("请输入第二个数: "))
      print("您输入的两个数的和是:", myadd(x, y))

  3. 写一个函数input_number
      def input_number():
          .... # 此处自己实现
      此函数用来获取用户循环输入的整数,当输入负数时结束输入
      将用户输入的数字以列表的形式返回,再用内建函数max,min,
      sum 求出用户输入的数的最大值,最小值及和,如:
      L = input_number()
      print("最大数是:", max(L))
      print("最小数是:", min(L))
      print("和是:", sum(L))

练习:
  1. 创建两个函数
    def sum3(a, b, c):
        # 用于返回三个数的和
        ....
    def pow3(x):
        # 用于返回x的三次方
        ...
    用以上两个函数计算:
      1. 计算1的立方 + 2的立方 + 3的立方 的和
      2. 计算1+2+3的和的立方
      即: 1**3 + 2**3 + 3 ** 3 和 (1+2+3)**3

  2. 改写之前的学生信息管理程序,封装为两个函数:
    def input_student():
        # 此函数用于返回所有用户输入的学生信息的列表
        ...
    def output_studentn(L):
        # 此函数以表格形式打印学生信息
        ...
    以下是调用(功能和打印效果与之前相同):
    infos = input_student()
    print(infos)
    output_student(infos)
  3. 编写函数,计算下列多项式的和:
     Sn  = 1/(1*2) + 1/(2*3) + 1/(3*4) + ...
         ... + 1/(n*(n+1))
    def Sn(n):
        ...
    print(Sn(3))  # 0.75
    print(Sn(1000))  # ???




