day03回顾:

if语句
  根据条件选择性的执行某条或某些语句
  语法:
    if 真值表达式:
        语句块1
    elif 真值表达式2:
        ....
    elif ....:
        ....
    else:
        语句块

第一条复合语句
if语句的嵌套
    if xxx:
        if yyy:
            if zzzz:
                ...
            else:
                ....
        else:
           ....
           
pass 语句
    填充语法空白

条件表达式 
    x + 1 if y > x else x + 2

布尔运算:
  and   or   not
一元运算符:
  +(正号)  -(负号)
    -100

字符串 str
  "hello"   'ABC中文'  'A B C' '\n\t'
  ' "  '''  """ 开头和结尾

  空字符串的布尔值为False

转义字符:
   '\n'  '\r'  '\\'  '\''  '\"'  '\t'
   '\xXX'  '\uXXXX'  '\UXXXXXXXX'

ascii 编码

len(x)  求字符串长度
原始字符串
   r'abc'
   r"ab\n\rcd"
   r'''abc'''
   r"""abc"""
   r'''ab
   cd'''  # 等同于'ab\ncd'

字符串的运算:
  + 拼接  * 重复n次   +=   *= 
  <  <=  >  >=  ==  != 
    "ABC" == "ABC"
    "ABC" == "CBA"  # False
  in , not in


day04笔记:
字符串的基本操作

索引 index
  python字符串是不可以改变的字符序列

索引取值语法:
  字符串[整数表达式]

说明:
  python的序列都可以用索引(index) 来访问序列中的对象
  python序列的正向索引是从0开始的，第二个索引为1,最后
    一个索引为len(s)-1
  python序列的反向索引是从-1开始的,-1代表最后一个，
    -2代表倒数第二个，以此类推。第一个是-len(s)
示例:
  s = "ABCDE"
  print(s[1])  # B
  print(s[4])  # E
  print(s[-1]) # E
  print(s[-5]) # A
  print(s[100])  # IndexError 越界

练习:
  写程序输入一个字符串,打印字符串中的如下内容
    1. 打印这个字符串的第一个字符
    2. 打印这个字符串的最后一个字符
    3. 如果这个字符串的长度是奇数，打印中间这个字符
  注:
    求字符串长度的函数是 len(s)

切片 slice
  作用:
    从字符串序列中取出相应的元素重新组成一个新的字符串
  语法:
    字符串[(开始索引b):(结束索引e)(:(步长s))]
    注:
      小括号() 括起来的部分代表可省略
  说明:
    开始索引是切片开始切下的位置，0代表第一个元素,1代表
      第二个元素，-1代表最后一个....
    结束索引是切片的终止索引(但不包含终止点)
    步长是切片每次获取完当前元素后移动的方向和偏移量
      1. 没有步长，相当于步长为1(默认为1)
      2. 当步长为正整数时，取正向切片：
          开始索引默认为0,结束索引默认是最后一个元素的
          下一个位置
      3. 当步长为负整数时取反向切片:
        反向切片时，默认的起始位置为最后一个元素，终止
        位置是第一个元素的前一个位置


  示例:
    s = "ABCDE"
    a = s[1:4]  # a---> "BCD"
    a = s[:4]   # 'ABCD'
    a = s[1:]   # 'BCDE'  # 等同于s[1:5]
    a = s[:]    # 'ABCDE'  # 等同于s[0:5]
    a = s[1:1]  # '' 空字符串
    a = s[4:2]  # '' 空
    a = s[0:5:2] # 'ACE'
    a = s[4:0:-2]  # 'EC'
    a = s[4::-2]  # 'ECA'
    a = s[::-1]   # 'EDCBA'

练习:
  1. 写一个程序，输入一个字符串，把字符串的第一个字符和
    最后一个字符去掉后，打印出处理后的字符串

  2. 写程序，输入任意一个字符串，判断这个字符串是否是回文
    回文是指中心对称的文字，如:
       上海自来水来自海上
       ABCCBA
    
Python运算符优先级
  文档参见:
    python_base_docs_html/Python运算符优先级.html

python3中能用于字符串的函数:
  len(x)  返回字符串长度
  max(x)  返回字符串编码值最大的字符
  min(x)  返回字符串中编码值最小的字符

字符串的编码转换函数:
  ord(c)  返回一个字符c的unicode编码值
  chr(i)  返回i这个值所对应的字符

  示例:
    x = ord('A')  # x = 65
    c = chr(66)   # c = 'B'

练习:
  1. 写一个程序，输入一段字符串，如果字符串不为空，则把第
    一个字符的编码值打印出来
  2. 写一个程序，输入一个整数(0~65535)，打印这个数值所
    对应的字符



整数转换为字符串的函数:
  bin(i)  将整数转换为二进制字符串
  oct(i)  将整数转换为八进制字符串
  hex(i)  将整数转换为十六进制字符串

字符串构造(创建)函数:
  str(obj)   将对象转换为字符串
  示例:
     '123' + 456  # 出错
     '123' + str(456)  # 结果 '123456'

python3中常用的字符串方法(method)
  方法的调用语法:
    对象.方法名(方法传参)
  示例:
    'abc'.isalpha()  # 返回True
    '123'.isalpha()  # 返回False
    123.isalpha()   # 出错
  方法见文档:
    python_base_docs_html/str.html
  
练习:
  输入一个字符串：
    1. 判断您输入的字符有几个空格
    2. 将原字符串的左右空白字符去掉，打印出有效的字符
       个数
    3. 判断您输入的是否是数字,
        如果是数字，判断用户输入的数字是否大于100

字符串格式化表达式
  作用:
    生成一定格式的字符串
  运算符:
    %
  语法格式:
    格式化字符串 % 参数值
    格式化字符串 % (参数值1, 参数值2, 参数值3, ...)
  说明:
    格式化字符串中以%开头的字符为占位符，占位符的位置将
    用参数值替换
  示例:
    fmt = "name: %s, age: %d"
    s2 = fmt % ("Tarena", 15)

    fmt2 = "年龄: %d"
    s3 = fmt2 % 35
    
格式化字符串中的占位符类型码
  占位符和类型码    含义
    %s        字符串，使用str(x) 函数转换
    %r        字符串，使用repr(x) 函数转换
    %c        整数转为单个字符
    %d        十进制整数
    %o        八进制整数
    %x        十六进制整数(字符a-f小写)
    %X        十六进制整数(字符A-F大写)
    %e        指数形浮点数(e小写) 如: 2.9e8
    %E        指数形浮点数(E大写) 如: 2.9E8
    %f,%F     浮点十进制数
    %g,%G     十进制形式浮点或指数浮点自动转换
    %%        等同于一个%字符


占位符和类型码之间的格式语法
  % [ - + 0 宽度.精度 ] 类型码
    -    左对齐(默认是右对齐)
    +    显示正号
    0    左侧空白位置补零
    宽度  整个数据输入的宽度
    精度  保留小数点后多少位(默认为6位)

  示例:
    "%10d" % 123    # '       123'
    "%-10d" % 123   # '123       '
    "%10s" % "abc"  # '       abc'
    '%-5s' % 'abc'  # 'abc  '
    '%05d' % 123    # '00123'
    '%+05d' % 123   # '+0123'
    '%7.3f' % 3.1415926535  # '  3.142'

练习:
  输入三行文字，让这三行文字依次以20个字符的宽度右对齐
    显示
  如:
    请输入第1行: hello world
    请输入第2行: abcd
    请输入第3行: aaaaaaa
  打印结果如下:
             hello world
                    abcd
                 aaaaaaa
  做完上题后再思考：
      能否以最长的字符串的长度进行右对齐显示（左侧填充
      空格)


循环语句:
  while 语句
  for 语句

问题:
  输入一个整数n,写程序打印如下n行文字:
    这是第1行
    这是第2行
    这是第3行
    ...
    这是第n行

while语句:
  作用:
    根据一定条件，重复执行一条语句或多条语句
  语法:
    while 真值表达式:
        语句块1(此部分语句可能会重复执行多次)
    else:
        语句块2
  说明:
    1. 先执行真值表达式,得到布尔值为True或False
    2. 如果真值表达式的值为True,则执行语句块1,然后再
       次返回到第1步，重复进行测试真值表达式的值
    3. 如果真值表达式的值为False,则执行else子句部分
       的语句块2,然后结束此while语句的执行
      注: else子句部分可以省略(同if语句类似)

  示例见:
    while.py

练习:
  1. 输入三行文字，让这三行文字在一个方框 内居中显示
  如输入:
     hello!
     I'm studing python!
     I like python!
  显示如下:
     +---------------------+
     |        hello!       |
     | I'm studing python! | 
     |    I like python!   |
     +---------------------+
  2. 用while循环打印 1 ~ 20 的整数(可以打印多行)   
  3. 用while循环打印 1 ~ 20 的整数，打印在一行显示
    每个数字之间用一个空格分隔
     1 2 3 4 5 6 .... 18 19 20
  4. 用while循环打印 1 ~ 20的整数，每行打印5个，
     打印4行,如:
     1 2 3 4 5
     6 7 8 9 10
     ...
  5. 输入一个整数n,打印一个宽度和高度都为n个字符的长方形
    如:
      请输入: 4
    打印:
      ####
      #  #
      #  #
      ####
    如:
      请输入: 6
    打印:
      ######
      #    #
      #    #
      #    #
      #    #
      ######
    
     












