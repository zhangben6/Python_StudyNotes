day09回顾
  传参(实参), 把数据给函数(给)
  形参,从函数调用的地方接收实参(拿)

传参方式:
  位置传参
    序列传参   函数名(*序列)
  关键字传参
    字典关键字传参  函数名(**字典)
def f1(name,c =3):
   print(name,c)
f1('zhangben',c = 4)
传参时,可变对象和不可变对象的区别
  不可变对象不会在函数内部被修改 

函数的形参:
  缺省参数:
    def f1(a=1, b=2):
        pass
    f1()
    f1(100)
    f1(100, 200)

  函数的形参的定义方式
    位置形参
    *元组形参
    命名关键字形参
    ** 字典形参

全局变量和局部变量

day10笔记:
globals() 函数 和 locals 函数

  globals()  返回当前全局作用域内变量的字典
  locals()  返回当前局部作用域内变量的字典

  示例见:
    globals_local.py


函数变量
  函数名是变量,它在创建函数时绑定一个函数
  示例见:
    function_variable.py
    function_variable2.py

一个函数可以作用另一个函数的实参传递
   可以把一个函数给另一个函数,另一个函数的形参变量将
   绑定实参函数
   示例见:
      func_give_func.py
      func_give_func2.py

看懂如下代码,判断结果
  def myinput(fn):
      L = [1, 3, 9, 5, 7]
      return fn(L)

  print(myinput(max))  # 9
  print(myinput(min))  # 1
  print(myinput(sum))  # 25

函数可以作用另一个函数的返回值
  示例见:
    return_function.py


练习:
  写一个计算公式的解释执行器
    已知有如下函数:
      def myadd(x, y):
          return x + y
      def mysub(x, y):
          return x - y
      def mymul(x, y):
          return x * y
      ...
    有一个返回函数的函数
      def get_func(s):
          '''此函数功能是,传入一个字符串用s绑定,根据s的
          值返回上面相应的函数, 如s == '+'或 s=='加' 返回
          myadd
          '''
          .... 自己实现此函数
    在主函数中程序如下:
      def main():
          while True:
              s = input("请输入计算公式: ") # 1 加 2
              L = s.split()  # L = ['1', '加', '2']
              a = int(L[0])
              b = int(L[2])
              fn = get_func(L[1])
              print("结果是:", fn(a, b))  # 结果是:3
      main()  # 调用主函数

函数的嵌套定义 
 函数嵌套定义是指一个函数里用def语句来创建其它函数的情况

示例见:
  function_embed_define.py

python的作用域
  作用域也叫名字空间，是访问变量时查找变量的名范围空间

python中的四个作用域 LEGB
   作用域             英文解释          英文缩写
局部作用域          Local(function)          L
外部嵌套函数作用域  Enclosing Fucntion local  E
函数定义所在模块(文件)的作用域  Global(module)  G
Python内建模块的作用域     Builtin(python)    B

示例见：
  namespace.py

变量名的查找规则
   L --->  E  ---> G  ---->  B
   注:
     在默认的情况下,变量名赋值会创建或改变当前作用域
     内变量的绑定关系

global 语句
  作用:
    1. 告诉解释执行器,global语句声明的一个或多个变量,这
    些变量的作用域为模块级的作用域,也称作全局变量
    2. 全局声明(global) 将赋值语句的变量映射到模块文
    件内部的作用域
  语法:
    global 变量名1, 变量名2, ....
  示例见:
    global.py

  说明:
    1. 全局变量如果要在函数内部被赋值,则必须经过全局声明
      (否则会被认为是局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问(取值)
    3. 不能先创建局部变量,再用global声明为全局变量,此
       种做法不符合规则
    4. global变量列表里的变量名不能出现在函数的形参列
       表里


nonlocal 语句
  作用:
    告诉解释器, nonlocal声明的变量不是局部变量,也不是
    全局变量,而是外部嵌套函数内的变量
  语法:
    nonlocal 变量名1, 变量名2, ....

  示例见:
    nonlocal.py
  说明:
    1. nonlocal 语句只能在被嵌套函数内部进行使用
    2. 对nonlocal变量进行赋值将对外部嵌套函数作用域
       内的变量进行操作
    3. 当有两层或两层以上函数嵌套时,访问nonlocal变量
       只对××最近的一层变量××进行操作
    4. nonlocal 语句的变量列表里的变量名不能出现在此
       函数的形参列表中

练习:
  用全局变量记录一个函数hello 被调用的次数
  部分代码如下:
  count = 0
  def hello(name):
      print("你好", name)
      ...  # 此处自己实现
  hello("小张")
  hello("小李)
  print("hello函数共被调用", count, "次")  # 2



def 语句的作用是创建函数


lambda 表达式(又称匿名函数)
  作用:
    创建一个匿名函数对象
    同def 类似,但不提供函数名
  语法:
    lambda [函数形参列表]: 表达式
  示例见:
    lambda.py
  说明:
    1. lambda 表达式创建的函数只能包含一条表达式
    2. lambda 比函数简单,且可以随时创建和销毁,有利于
       降低程序的偶合度
    
练习:
  1. 写一个lambda表达式
    fx = lambda n: .....
  此表达式创建的函数判断n这个数的平方+1 能否被5整除,
  如果能整除则返回True,否则返回False
    print(fx(3))  # True
    print(fx(4))  # False

  2. 写一个lambda 表达式来创建函数,此函数返回两个参
    数的最大值
    def mymax(x, y):
         ....
    mymax = lambda .....
    print(mymax(100, 200))  # 200


  3. 看懂下面的程序在做什么?结果是什么 ?
    def fx(f, x, y):
        print(f(x, y))
    
    fx((lambda a, b: a + b), 100, 200)
    fx((lambda x, y: x**y), 3, 4)


eval函数和exec() 函数
  eval(source, global=None, local=None), 把一个
      字符串source 当成一个表达式来执行,返回表达式执
      行后的结果
  exec(source, global=None, local=None)  把一个
      字符串source当成程序来执行

  示例见:
    eval.py
    exec.py
    eval2.py


练习:
  1. 给出一个数n,写一个函数mysum来计算
     1 + 2 + 3 + .... + n 的和
    要求用函数来做
    如:
      print(mysum(100))  # 5050
  2. 给出一个数n,写一个函数myfac来计算n!(n的阶乘)
    n! = 1 * 2 * 3 * ... * n
    print(myfac(5))  # 120
  3. 给出一个数n,写一个函数计算:
    1 + 2**2 + 3**3 + .... + n**n的和
  4. 实现带界面的学生信息管理程序
    界面如下:
    +----------------------+
    | 1) 添加学生信息        |
    | 2) 查看学生信息        |
    | 3) 删除学生信息        |
    | 4) 修改学生成绩        |
    | q) 退出               |
    +----------------------+
    请选择:1
    请输入学生姓名: xiaozhang
    请输入学生年龄: 20

    要求每个功能写一个函数与之相对应(复用之前的学生信息
    管理程序)
dsadsad 