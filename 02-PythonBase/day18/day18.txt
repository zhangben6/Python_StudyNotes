day17回顾:
面向对象:
  什么是对象
  什么是类

对象的特征:
  属性
  行业

类 class
  类是用于描述对象，创建的对象(实例)

实例方法
  class 类名:
      def 实例方法名(self, 方法的形参列表)：
          语句块
调用的语法:
   对象.实例方法名(实参)
   类名.实例方法名(对象, 实参)

class 类内:
  class 类名:
      实例方法(self, ...):
         ...
      类变量
      类方法
      静态方法
  构造函数
    类名(调用实参)  创建一个实例(对象)
  
实例变量(实例属性)
  记录对象的数据

  v = 对象.属性名  # 取值
  对象.属性名 = v   # 赋值(创建或修改实例变量)

删除实例变量
  del 对象．属性名

初始化方法:
  def __init__(self, 方法的形参):
      ....

  作用:
    创建实例变量(实例属性)
  
析构方法:
  def __del__(self):
      ...

  
预置的实例属性:
  __dict__  绑定实例变量(实例属性)的字典
    class Dog:
       pass
    dog1.color = "白色"  ＃　添加实例变量
    dog1.__dict__['kinds'] = "京巴"  # 添加实例变量

  __class__  绑定创建此实例的类
     type(obj)  返回obj.__class__


type(obj)  # 返回类型等同于 obj.__class__
isinstance(obj, 类或类的元组) 
   obj.__class__ is 类
   或
   obj.__class__ in 元组




day18笔记:
  类
    定义方法:
      class 类名:
          ...
  类也是对象,它是能创建实例的对象

类变量
  类变量是类的属性，此属性属于类，不属于此类的实例
  作用:
    通常用来存储该类创建的对象的共有属性
  说明:
    类变量可以通过该类直接访问
    类变量可以通过类的实例直接访问(取值)
    类变量可以通过此类的对象的__class__属性间接访问
  示例见:
    class_variable.py

  实例方法和类方法都是类的变量(类变量)


类的文档字符串:
  类内第一个没有赋值给任何变量的字符串为类的文档
  字符串
  类的文档字符串绑定在类的 __doc__ 属性上
  示例:
    class Dog:
        '''Dog类的文档字符串'''
    
    >>> help(Dog)
    >>> print(Dog.__doc__)

类的 __slots__ 列表:
  作用:
    限定一个类创建的实例只能在固定的属性(实例变量)
      不允许对象添加此列表以外的实例属性
    访问用户因错写属性名而发生程序错误
  说明:
    __slots__属性是一个列表,列表的值是字符串
    含有__slots__属性的类所创建的实例对象没有
      __dict__属性,即此实例不用字典来存储实例属性
  示例见:
    slots.py

类方法 @classmethod
  类方法是用于描述类的行为的方法,类方法属于类,不属于
  该类创建的对象

  说明:
    1. 类方法需要使用@classmethod 装饰器定义
    2. 类方法至少有个一个形参,第一个形参用于绑定
       类,约定写为'cls'
    3. 类和该类的实例都可以调用类方法
    4. 类方法不能访问此类创建的对象的实例属性
  示例见:
    classmethod.py
    
静态方法 @staticmethod
  静态方法是定义在类内的函数,此函数的作用域是类的内部

  说明:
    1. 静态方法需要使用@staticmethod 装饰器定义
    2. 静态方法与普通函数定义相同,不需要传入self
       和cls参数
    3. 静态方法只能凭借该类或类的实例调用
    4. 静态方法不能访问类变量和实例变量
  示例见:
    staticmethod.py


函数,静态方法, 类方法, 实例方法:
  共性:
    语句块,实现相应的功能

练习:
  1. 用类来描述一个学生的信息(也可以改写之前的
     Student类)
  2. 学生信息有:
     姓名,年龄,成绩
  3. 将这些学生对象存于列表中,可以任意添加,和
     删除学生信息
   1) 打印出学生的个数
   2) 打印出所有学生的平均成绩
   3) 打印出所有学生的平均年龄
     (建议用类变量来记录学生的信息的列表)

继承 inheritnce 和 派生 derived
  什么是继承／派生
    派生就是从一个已有的类中衍生成新类
    继承是指在衍生出的新类中的对象会拥有原类的属
       性和行为
　作用:
    用继承派生机制，可以将一些共有功能加在基类中．
    实现代码共享
    在不改变基类代码的基础上，改变原有类的功能
  名词:
    基类(base class)/超类(super class)/父
    类(father class)
    派生类(derived class) / 子类(child class)

单继承:
  语法:
    class 类名(基类名):
        语句块
  说明:
    单继承是指派生类由一个基类衍生出来的类
  示例见:
    inherit.pyinherit.py

继承说明:
  python3中任何类都直接或间接的继承自object类
  object类是一切类的超类

类的__base__属性
  __base__ 属性用来记录此类的基类

python内建类的继承关系见:
  >>> help(__builtins__)


覆盖 overridde
  覆盖是指在有继承关系的类中．子类中实现了与基类
  同名的方法，在子类的实例调用该方法时，实际调用的
  是子类的覆盖版本，这种现象叫做覆盖

  作用:
    实现和父类同名，但功能不同的方法

　示例见:
   override.py

问题:
  当覆盖发生时, 如何调用父类的被覆盖方法？

super函数
  super(cls, obj) 返回绑定超类的实例(要求obj必须
       是cls 类或cls子类的对象)
  super()   返回绑定超类的实例，等同于:
        super(__class__, 实例方法的第一个参数),
        必须用在方法内调用
　作用:
    借助super() 返回的实例间接调用父类的覆盖方法
  示例见:
    super.py

super的应用
  显式调用基类的初始化方法
    当子类中实现了__init__方法，基类的__init__方法
    将不会被自动调用.如果需要调用，则需要用super显式
    调用.
  示例见:
    super_init.py


练习:
  1. 写一个类Bicycle自行车类,有run方法,调用时
  显示骑行的里程km
    class Bicycle:
        def run(self, km):
            print("自行车骑行了", km, '公里')
    再写一个EBicycle电动自行车类,在Bicycle的基础
    上添加了电池电量volume属性,有两个方法:
      fill_charge(vol)  用来充电 vol为电量
      run(km)  方法,每骑行10km消耗电量1度,同时显
      示当前电量,当电量耗尽时则调用Bicycle的run方法
      (用脚蹬骑行)
    
    class EBicycle:
        ....
    b = EBicycle(5)  新买的电动车内有5度电
    b.run(10) 电动骑行了10km里,还剩4度电
    b.run(100) 电动骑行了40km里,还剩0度电,用脚蹬
            骑行了60km
    b.fill_charge(10)  电动自行车充电10度
    b.run(50)  电动骑行了50km里,还剩5度电