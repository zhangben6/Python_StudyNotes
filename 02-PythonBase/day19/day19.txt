day18回顾
   类       ->   对象  (实例)
 class         object(instance)

对象:
  实列变量(实例属性)
  实列方法
类:
  类变量(类属性)
  类方法(@classmethod)
    @classmethod
    def myclassmethod(cls, ....):
         ....
静态方法(类内的函数)
  

预置的类属性(类变量)
  __docs__ 绑定文档字符串
  __base__ 绑定当前类的基类(父类)

__slots__列表
  限定一个类只能有固定的实例变量(实例属性)
继承 / 派生
  
单继承
  class 类名(只有一个父类):
       pass

覆盖:
  有继承关系的类中,子类实现与父类同名的方法,子类调用
  该方法实际调用的是子类的覆盖版本

一但覆盖,子类对象没办法去直接调用父类的被覆盖方法
  super(类, 对象)
  super()  # 只能在方法里调用

用super显式调用父类的 __init__ 初始化方法
   super().__init__(给父类的初始方法传实参)


day19笔记:
用于类的函数:
  issubclass(cls, class_or_tuple) 判断一个类是
          否继承自某个类 class 或某些类tuple中的
          一个类,如果是则返回True,否则返回False
  示例:
    class A:
        pass
    class B(A):
        pass
    class C(B):
        pass
    issubclass(C, B) # True
    issubclass(bool, int)  # True
    issubclass(str, (A, B, int, float))  # False
    issubclass(str, (A, B, int, object)) # True


封装 
  封装是指隐藏类的实现细节,让使用者不关心这些细节
  封装的目的是让使用者通过尽可能少的方法(或属性)操
  作对象

私有属性和方法
  python类中以双下划线__开头,不以双下划线结尾的标识
  符为私有成员,私有成员只能使用该类的方法进行访问和
  修改

示例见:
  enclosure.py

多态 polymorphic
  字面意思: '多种状态'


编程语言的状态:
  静态(编译时状态)  # C/C++
  动态(运行时状态)  # C++/Java


多态是指在有继承关系的类中,调用基类对象的方法,实际能
 调用到子类覆盖方法的现象叫多态
  说明:
    python全部的对象都只有'运行时状态(动态)',没有
    C++语言里的编译时状态(静态)

示例见:
  poly.py


面向对象编程语言的特征:
  继承
  封装
  多态

多继承 multiple inheritance
  多继承是指一个子类继承自两个或两个以上的基类

多继承是的语法:
    class 类名(基类名1, 基类名2, ...):
        语句

说明:
  1. 一个子类同时继承自多个父类,父类中的方法可以同
  时被继承下来
  2. 如果两个父类中有同名的方法,而在子类中又没有覆
  盖此方法时,调用结果难以确定
示例见:
  multi_inherit.py

多继承的问题(缺陷)
  标识符(名字空间) 冲突的问题
    要谨慎使用多继承

示例见:
  multi_inherit2.py

多继承的MRO(Method Resolution Order) 问题
  MRO --> 方法的解决(查找)顺序
  类的 __mro__属性
    用来记录类的方法的查找顺序

示例见:
  mro.py



对象转字符串函数的使用
  repr(obj) 返回一个附合python语法规则的字符串,
     通常:
        eval(repr(obj)) == obj
  str(obj)  通过给定的对象返回一个字符串(这个字符
      串通常是给人阅读的)
  示例见:
    repr_str.py
  说明:
    以上两个函数返回的一定是个字符串

函数重写
  函数重写是指在自定义的类内添加相应的方法,让自定义
  的类创建的实例可以像内建对象一样进行函数操作

对象转字符串函数的重写方法
  repr(obj) 函数的重写方法:
      def __repr__(self):
          return '字符串'
  str(obj)  函数的重写方法:
      def __str__(self):
          return '字符串'
  示例见:
    mynumber.py
    student.py

str(obj) 函数调用方法说明:
  1. 先调用obj.__str__() 方法取值.
  2. 如果obj.__str__()方法不存在,则调
     用obj.__repr__() 方法取值
  3. 如果再不存在obj.__repr__()方法.则调用object
     类的__repr__方法取值.

内建函数重写
  方法名                函数名
 __abs__(self)      abs(obj) 函数
 __len__(self)      len(obj) 函数
 __reversed__(self) reversed(obj)
 __round__(self)    round(obj)

示例见:
  len_overwrite.py

数值转换函数重写
   方法名                 函数名
  __complex__(self)      complex(obj)
  __int__(self)          int(obj)
  __float__(self)        float(obj)
  __bool__(self)         bool(obj)
示例见:
  mynumber2.py

布尔测试函数bool(obj) 函数重写
  作用:
    用于bool(obj) 函数取值:
    用于if语句的真值表达式中
    用于while语句的真值表达式中
  说明:
    1. 优先调用obj.__bool__() 方法进行取值
    2. 当不存在obj.__bool__() 方法时,用 
       obj.__len__() 的返回值是否为零来测定布尔值
    3. 当不存在__len__() 方法时,则直接返回True
  示例见:
    bool.py

对象的属性管理函数
  getattr(obj, name[, default]) 从一个对象得到
        对象的属性；getattr(x, 'y') 等同于x.y;
        当属性不存在时,如果给出default参数,则返
        回default,如果没有给出default 则产生一
        个AttributeError错误
  hasattr(obj, name) 用给定的name返回对象obj是
        否有此属性,此种做法可以避免在
        getattr(obj, name)时引发错误
  setattr(obj, name, value) 给对象obj的名为
        name的属性设置相应的值value, 
        set(x, 'y', v) 等同于 x.y = v
  delattr(obj, name) 删除对象obj中的name属性,
        delattr(x, 'y') 等同于 del x.y

迭代器(高级)
  什么是迭代器
    可以能过next(it) 函数取值的对象就是迭代器
  迭代器协议:
    迭代器协议是指对象能够使用next函数获取下一
    项数据,在没有下一项数据时触发一个StopIteration
    异常来终止迭代的约定
  迭代器协议的实现方法:
    __next__(self) 方法来实现迭代器协议

什么是可迭代对象:
  是指能用iter(obj) 函数返回迭代器的对象(实例)
  可迭代对象的内部要定义 __iter__(self) 方法来返回
  迭代器对象(实例)

示例见:
  mylist_iterable.py


练习:
  1. 修改之前的学生信息管理程序
      要求将学生的成绩,姓名，年龄属性进行封装，不让
      除Student类之外的函数和方法访问和修改
  2. 实现一个与系统内建的range类相同功能的类:
      class MyRange:
          def __init__(self, ....):
              ...
          def __iter__(self):
              ...
    实现如下功能:
      L = list(MyRange(5))
      print(L)  # [0, 1, 2, 3, 4]
      print(sum(MyRange(1, 101)))  # 5050
      L2 = [x**2 for x in MyRange(1, 10, 3)]
      print(L2)  # [1, 16, 49]
      for x in MyRange(10, 0, -3):
          print(x)  # 10, 7, 4, 1



