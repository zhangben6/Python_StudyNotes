day12回顾

装饰器
  装饰器函数:
    def 装饰函数名(fn):
        ...
        return 函数
  如:
    def mydeco(fn):
        return fn
    
    @mydeco
    def fun():
        print("fun函数被调用")
    
    fun = mydeco(fun)

  示例:
    def mydeco(fn):
        def fx(a, b):
            print("++++++")
            fn(a, b)
            print('------')
        return fx
    
    @mydeco
    def fun(x, y):
        pass
    fun(100, 200)

函数名 和函数调用
    def fun():
        pass
    print(fun)  # 打印fun绑定的函数
    print(fun())  # 调用fun绑定的函数,打印函数的返回结果

函数的文档字符串
    def fx():
        '''文档字符串'''
    用于help() 帮助函数

函数对象的 __doc__属性 绑定文档字符串

模块的概念
  模块是一个包含有一系列的数据,函数,类等组成的程序组
  
导入 import
  导入语句:
    import 语句
        import math, sys, time
    from import 语句
        from math import sin,cos, pi
    from import * 语句
        from math import *

dir() 函数
help() 函数

模块的使用:
  math 模块
  time 模块
  sys  模块
     

day13 笔记
自定义模块并导入
  要求:
    模块文件名后缀名必须以 .py 结尾
    模块文件名必须是合法的标识符
    避免名称和内建模块名冲突
  导入方式:
    import 语句
    from import 语句
    from import * 语句 
  示例见:
    mymod.py

import 语句查找模块文件的路径顺序
  import 模块名  # 去哪儿找这个 "模块名.py"

  1. 搜索内建模块
  2. 搜索程序运行时的路径(当前路径)
  3. sys.path 提供的路径
    sys.path 是一个列表,内部存入的都是模块的搜索路径
        >>> import sys
        >>> print(sys.path)
  
  安装 第三方模块或包
     pip3 install 模块名 
  让import语句能找到自己的模块
    1. 把自己的写的模块放到sys.path中的某个文件夹内
    2. 修改sys.path列表,在内部添加一个文件夹的字符串
       (注:此做法只对当前程序起作用)
       如:
        import sys
        sys.path.append('/home/tarena')
        示例见:
           test_mymod2.py

模块化编程优点:
  1. 有利于多人合作开发
  2. 使代码更加易于维护
  3. 提高代码的复用率
  4. 有利于解决变量名冲突问题(模块内的全局变量的作用域
     为模块内全局)

模块的加载过程
  在模块导入时,模块内的所有语句都会执行
  如果一个模块已经导入,则再次导入时不会重新执行模块内的语句

模块被导入和执行的过程
  1. 先搜索相关路径找到 模块名.py
  2. 判断是否有此模块对应的pyc文件.如果.pyc文件比.py
     文件新则直接加载.pyc文件
  3. 如果.pyc文件比.py文件旧,则用模块名.py 生成 .pyc
     文件,并加载执行
模块的编译 
           编译               解释执行
  mymod.py ----->  mymod.pyc --------> python3

模块的属性
  __doc__ 属性
    用于绑定模块的文档字符串

  模块的文档字符串用于help(模块) 函数提供帮助信息
  示例见:
    mymod2.py

  __file__属性
    用于绑定模块的文件路径名
  
  __name__属性
    __name__属性用来记录模块自身的名字
    作用:
      1. 记录模块名
      2. 用来判断是否为主模块
    说明:
      当模块作为主模块(也就是第一个运行的模块)运行时,
      __name__属性 绑定 '__main__'
      当此模块不是主模块时,__name__属性 绑定模块名
        如:
          mymod.py 的模块名为 'mymod'


模块的__all__列表
  作用:
    当用from xxx import *语句导入时,只导入__all__
    列表内的属性
  说明:
    __all__列表是一个用来存放可导出属性的字符串列表
  示例见:
    mymod3.py

模块的隐藏属性
  模块中以'_' 开头的属性,在用 from xxx import * 导
  入时将不被导入,通常称这些属性为隐藏属性
  示例见:
    mymod4.py
  
随机模块 random
  作用:
    用于模拟或生成随机输出的模块
  文档参见:
    python_base_docs_html/随机模块random.py
  
练习:
  用random模块,随机为自己生成一个6位数的数字密码
     442260

  猜数字游戏:
    让程序随机生成一个整数(0~100)之间,用变量x绑定
    让用户循环输入整数用y绑定,打印猜数字结果
       如果y > x 则提示用户"您猜大了"
       如果y < x 则提示用户"您猜小了"
       如果y 等于 x 则提求用户"恭喜您猜对了",然后退出
       循环输入,并打印用户猜数字的次数
    


包(模块包)  package
  包是将模块以文件夹的组织形式进行分组管理的方法

  作用:
    将一系列模块进行分类管理,有利于防止命名冲突
    可以在需要时加载一个或部分模块,而不是全部模块
  示例:
    mypack/
        __init__.py
        menu.py
        games/
            __init__.py
            contra.py
            supermario.py
            tanks.py
        office/
            __init__.py
            excel.py
            word.py

包的导入
  同模块的导入规则
  import 包名 [as 包别名]
  import 包名.模块名 [as 模块新名]
  import 包名.子包名.模块名 [as 模块新名]

  from 包名 import 模块名 [as 模块新名]
  from 包名.子包名 import 模块名 [as 模块新名]
  from 包名.子包名.模块名 import 属性名 [as 属性新名]

  from 包名 import *
  from 包名.模块名 import *
  ...

__init__.py 文件
  __init__.py 是常规包内必须存在的文件
  __init__.py 会在包加载时被自动调用

  作用:
    编写此包的内容
    在包内填写包的文档字符串
    在__init__.py 文件内可以加载此包所依懒的一些其
    它模块
  
__init__.py 内的 __all__列表
  作用:
    用来记录此包中有哪儿些包或模块需要导入
    当用from 包 import *语句导入模块时,只查找__all__
    中所有的模块或子包
  说明:
    __all__列表 只在from xxx import * 起作用
  示例见:
    mypack/games/__init__.py

import 语句搜索包的路径的顺序:
   1. 搜索程序运行时的路径(当前工作目录)
   2. sys.path提供的路径

包的相对导入
  包的相对导入是指包内模块的相互导入
  语法:
    from 相对路径包或模块 import 属性或模块名
    或
    from 相对路径包或模块 import *
  相对路径:
    在from import语句和 from imoprt *语句中可以使
    用相对路径
    . 代表当前目录
    .. 代表上一级目录
    ... 代表上二级目录
    .... 以此类推
    注: 相对导入时不能超出包的外部
  示例见:
    mypack/games/contra.py 


1. 模拟斗地主发牌,牌共54张
   黑桃('\u2660'), 梅花('\u2663'), 红桃('\u2666')
   方块('\u2665')
   A2-10JQK
   大王,小王
   三个个,每人发17张牌,底牌留三张
     输入回车,打印第1个人的17张牌
     输入回车,打印第2个人的17张牌
     输入回车,打印第3个人的17张牌
     输入回车,显示三张底牌

2. 修改原学生信息管理程序,将程序拆分为模块:
   要求:
     1. 主事件循环while语句放在main.py中
     2. show_menu函数放在menu.py中
     3. 与学生操作相关的函数放在student_info.py中

3. 打印杨辉三角(只打印6层, 思考题,明天或后天才讲)
      1
     1 1
    1 2 1
   1 3 3 1
  1 4 6 4 1
1 5 10 10 5 1