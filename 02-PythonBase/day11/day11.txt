day10 回顾:
两种变量
  全局变量
  局部变量

globals() / locals()   返回某个作用域内所有变量的字典

函数名是变量,它在用def创建函数时绑定一个函数
    def f1():
        print("f1")
    f2 = f1
    f2()  # 也可以调用f1函数

一个函数可以作用另一个函数的实参传递
    def myfx(fx):
        pass
    myfx(max)  # 在调用函数时,可以传入函数 
一个函数可以返回另一个函数的引用关系
    def myfx():
        return max

函数的嵌套定义
    def f1():
         def f2():
             def f3():
                 pass
    
    f1()

python3作用域
   局部作用域             L
   外部嵌套函数的作用域     E
   函数定义所在模块的作用域  G
   内置模块的作用域
    
global语句
nonlocal语句


lambda 表达式
  语法:
      lambda 形参列表:  表达式
  返回值是匿名函数

eval 和 exec 函数






day11笔记

函数式编程
  函数式编程是指用一系列函数解决问题

  函数是一等公民(Guido)

好处:
  用每个函数完成细小的功能,一系列函数的任意组合可以解决
    大问题
  函数仅接收输入并产生输出,不包含任何能影响输出的内部状态

函数的可重入性
  当一个函数的输入实参一定.结果也必须一定的函数称为
  可重入函数
  说明:
    可重入函数在函数内部一定不访问除局部变量以外的变量

示例:
    # 可重入函数:
    # 只能使用和访问函数内部的局部变量,不能访问函数以外的变量
    def myadd(x, y):
       return x + y
    # 不可重入函数
    s = 0
    def myadd2(x, y):
        global s
        s += x + y
        return s
  


高阶函数 High Order Function
    map  filter  sorted

什么是高阶函数
   满足下列条件中一个的函数即为高阶函数
      1. 函数接受一个或多个函数作用参数传入
      2. 函数返回一个函数

map 函数
  map(func, *iterable)  返回一个可迭代对象,此可迭代
       对象用函数 func对可迭代对象iterable中的每一个
       元素作用参数计算后得一结果,当最短的一个可迭代对
       象不再提供数据时可迭代对象生成数据结束
  示例:
    def power2(x):
        return x ** 2
    # 生成一个可迭代对象,此可迭代对象可以生成1~9的
    # 整数的平方
    for x in map(power2, range(1, 10)):
        print(x)
    # 生成一个可迭代对象, 此可迭代对象可以生成:
      1**4, 2**3, 3**2, 4**1
      
    def mypower2(x, y):
        return x ** y

    for x in map(mypower2,[1,2,3,4],[4,3,2,1]):
        print(x)
    # 看懂下面程序在做什么:
    for x in map(pow, [1,2,3,4], [4,3,2,1],
                 range(5, 10)):
        print(x)

练习:
  1. 求:
    1**2 + 2**2 +3**2 +...+9**2的和
  2. 求:
    1**3 + 2**3 +3**3 +...+9**3的和
  3. 求:
    1**9 + 2**8 + 3**7 + ... + 9**1的和


filter函数:
  filter(function, iterable)   返回一个可迭代对象
        此可迭代对象将iterable提供的数据用函数function
        进行筛选,function将对iterable中的每个元素求值
        返回False将此数据丢弃,返回True则保留
  示例:
    def isodd(x):
       return x % 2 == 1
    # 打印0~10之间所有的奇数:
    for x in filter(isodd, range(11)):
        print(x)
    for x in filter(lambda x:x%2, range(11)):
        print(x)
    
    L = [x for x in filter(isodd, range(11))]


sorted函数
  作用:
    将原可迭代对象提供的数据进行排序, 生成排序后的列表
  格式说明
    sorted(iterable, key=None, reverse=False)
    返回一个新的包含所有可迭代对象中数据的列表,新的列表
    是排序过的列表
  参数说明:
    iterable  可迭代对象
    key     函数是用来提供一个值,这个值将作用排序的依据
    reverse  标志用来设置是否降序排序(默认为升序))
  示例:
    L = [5, -2, -4, 0, 3, 1]  
    L2 = sorted(L)  # L2=[-4, -2, 0, 1, 3, 5]
    L3 = sorted(L, reverse=True)  # 从大到小排序

    L4 = sorted(L, key=abs)  # L4=[0, 1, -2, 3, -4, 5]
                             # 依据 0, 1,  2, 3,  4, 5

    names = ['Tom', 'Jerry', 'Spike', 'Tyke']
    sorted(names)  # ['Jerry', 'Spike', 'Tom', 'Tyke']
    sorted(names, key=len)
    sorted(names, key=len, reverse=True)
def f1(x):
    return x[::-1]
names = ['Tom', 'Jerry', 'Spike', 'Tyke']
L = sorted(names,key=f1)

练习:
  names = ['Tom', 'Jerry', 'Spike', 'Tyke']
  排序的依据是:
           'moT'   'yrreJ'  'ekipS'  'ekyT'
  结果: ['Spike', 'Tyke', 'Tom', 'Jerry']


递归函数  recursion
  函数直接或间接的调用自身

示例:
    # 函数直接调用自身
    def f():
        f()  # 调用自己
    f()
    # 函数间接调用自身
    def fa():
        fb()
    
    def fb():
        fa()

    fa()

递归说明:
  递归一定要控制递归的层数,当符合某一条件时要终止递归调用
  几乎所有的递归都能用while循环来代替

递归的优缺点:
  优点:递归可以把问题简单化,让思路更为清晰,代码更简洁
  缺点: 递归因系统环境影响大,当递归深度太大时,可能会
    得到不可预知的结果

递归函数的执行分为两个阶段:
  递推阶段: 调用进入函数内部
  回归阶段: 返回结果,得到最终结果

示例见: 
  recursion.py

练习:
  试用递归方式实现
    1 + 2 + 3 + 4 + .... + n 的和
    如:
      def mysum(n):
         ....
      print(mysum(100))  # 5050
      print(mysum(10000))  # ???


闭包 closure
什么是闭包
  闭包是指引用了此函数外部变量的函数
    (外部变量指:外部嵌套函数作用域内的变量)

  闭包必须满足三个条件:
    1. 必须有一个内嵌函数
    2. 内嵌函数必须引用外部函数中的变量
    3. 外部函数返回值必须是内嵌函数

  注意点:
    由于闭包会使得函数中的变量都被保留在内存中,内存消耗
    比较大,所以不能滥用闭包
  示例见:
    closure.py

闭包测试题:
  试看下列程序的执行结果是什么?
  def get_funs(n):
      L = []
      for i in range(n):
          L.append(lambda x: x * i)
      return L
  
  funs = get_funs(4)
  print(funs[0](10))  # 30
  print(funs[1](10))  # 30
  print(funs[2](10))  # 30
  print(funs[3](10))  # 30


练习:
  1. 试写程序解决下面的问题:
    已知有五位 朋友在一起
      第五位朋友说它比第四位朋友大2岁
      第四位朋友说它比第三位朋友大2岁
      第三位朋友说它比第二位朋友大2岁
      第二位朋友说它比第一位朋友大2岁
      第一位朋友说它10岁
    编写程序,分别打印出上述五个人的年龄
  2. 已知有列表:
    L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]
    1) 写一个函数print_list(lst) 打印出所有的数字
       print_list(lst)  # 打印 3 5 8 10 13...
    2) 写一个函数sum_list(lst) 返回这个列表中所有数字
       的和
       print(sum_list(L))  # 106
    注:
      type(x) 可以返回一个变量的类型
         如:
           >>> type(20) is int  # True
           >>> type([1, 2, 3, 4]) is list  # True
  3. 改写之前的学生信息管理项目程序
     要求添加四个功能:
       | 5) 按学生成绩高-低显示学生信息 |
       | 6) 按学生成绩低-高显示学生信息 |
       | 7) 按年龄成绩高-低显示学生信息 |
       | 8) 按年龄成绩低-高显示学生信息 |

