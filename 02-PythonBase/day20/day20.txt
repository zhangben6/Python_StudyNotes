day19回顾
  issubclass(cls, 类或元组)  

封装
  __ 开头的私有属性和私有方法来实现

多态
  动态和静态

继承,封装,多态

多继承
  一个子类继承自两个或两个以上的父类

__mro__   Method Resolution Order
  super(B, b).xxxx()


函数重写
  让自定义的类能够使用内建函数进行操作
    repr    __repr__
    str     __str__
    len
    abs
    round
    reversed
    int
    float
    complex
    bool

四个属性相关的函数
  setattr(obj, name, value)
  hasattr(obj, name)
  getattr(obj, name [,default])
  delattr(obj, name)

迭代器
  __next__(self)  方法
    实现迭代器协议

可迭代对象
  __iter__(self) 方法
     return 迭代器

day20笔记
异常
  异常相关的语句回顾:
    try-except
    try-finally
    raise
    assert

with语句
  语法:
    with 表达式1 [as 变量1],
               表达式2[as 变量2], ...:
        语句块
  作用:
    使用于对资源进行访问的场合,确保使用过程中不管
    是否发生异常,都会执行必须的'清理'操作,并释放资
    源（关闭操作)
      如:文件使用后自动关闭,线程中锁的自动获取和
           释放等
  说明:
    执行表达式, 用as 子句中的变量绑定生成的对象
    with语句并不改变异常的状态
  示例见:
    with.py

环境管理器
  类内有 __enter__ 和 __exit__实例方法的类被称为
  环境管理器
  __enter__将在进入with语句时被调用,并返回由as变量
  管理的对象
  __exit__将在离开with语句时被调用,且可以用参数来
  判断在离开with语句时是否有异常发生,并做出相应的
  处理
示例见:
  with2.py



运算符重载
  什么是运算符重载
    让自定义的类生成的对象(实例)能够使用运算
    符进行操作
  作用:
    让自定义的类的实例像内建对象一样使用运算符
    让程序简洁易读
    对自定义的对象将运算符赋予新的运算规则
算术运算符重载
  方法名                运算符和表达式   说明
 __add__(self, rhs)      self +  rhs  加法
 __sub__(self, rhs)      self -  rhs  减法
 __mul__(self, rhs)      self *  rhs  乘法
 __truediv__(self, rhs)  self /  rhs  除法
 __floordiv__(self, rhs) self // rhs  地板除
 __mod__(self, rhs)      self %  rhs  求余
 __pow__(self, rhs)      self ** rhs  幂运算

    rhs (right hands side)  右手边
示例见:
  mynumber1.py

说明:
  运算符重载的方法和参数已经有固定的含义,不建议
  改变原有的意义

练习:
  实现两个自定义的列表相加
    class MyList:
        def __init__(self, iterable=()):
             ...
        .....
    L1 = MyList(range(1, 4))
    L2 = MyList([4, 5, 6])
    L3 = L1 + L2
    print(L3)  # MyList([1, 2, 3, 4, 5, 6])
    L4 = L2 + L1
    print(L4)  # MyList([4, 5, 6, 1, 2, 3])
    L5 = L1 * 2
    print(L5)  # MyList([1, 2, 3, 1, 2, 3])
    # 思考:
    L6 = 2 * L2   # 可以吗?为什么?



反向算术运算符的重载
  当运算符左侧为内建类型,右侧为自定义类型进行算术
    运算时,会出现TypeError错误
  因无法修改内建类型的代码来实现运算符重载,此时需要
    使用反向算术运算符重载来完成重载

  方法名                运算符和表达式   说明
 __radd__(self, lhs)      lhs +  self  加法
 __rsub__(self, lhs)      lhs -  self  减法
 __rmul__(self, lhs)      lhs *  self  乘法
 __rtruediv__(self, lhs)  lhs /  self  除法
 __rfloordiv__(self, lhs) lhs // self  地板除
 __rmod__(self, lhs)      lhs %  self  求余
 __rpow__(self, lhs)      lhs ** self  幂运算

示例见:
  code/mylist.py

复合赋值算术运算符重载
  以复合赋值算术运算符 x += y 为例,此运算符会优先
  调用 x.__iadd__(y) 方法.如果没有__iadd__方法
  时会将赋合赋值运算符拆解为 x = x + y 然后再调用
  x = x.__add__(y)  方法,如果再不存在__add__方法
  则会触发TypeError异常
  其它复合赋值算术运算符也具有相同的规则

  方法名                运算符和表达式   说明
 __iadd__(self, rhs)      self +=  rhs  加法
 __isub__(self, rhs)      self -=  rhs  减法
 __imul__(self, rhs)      self *=  rhs  乘法
 __itruediv__(self, rhs)  self /=  rhs  除法
 __ifloordiv__(self, rhs) self //= rhs  地板除
 __imod__(self, rhs)      self %=  rhs  求余
 __ipow__(self, rhs)      self **= rhs  幂运算

示例见:
  mylist2.py



问题:
    # ---- 程序1用列表实现 -------
    L = [1, 2, 3]
    def f1(lst):
       lst += [4, 5, 6]
    f1(L)
    print(L)  # [1, 2, 3, 4, 5, 6]
    # -----程序用元组实现 --------
    L = (1, 2, 3)
    def f1(lst):
       lst += (4, 5, 6)
    f1(L)
    print(L)  # (1, 2, 3)
比较运算符的重载:
   方法名              运算符和表达式   说明
 __lt__(self, rhs)    self <  rhs    小于
 __le__(self, rhs)    self <= rhs    小于等于
 __gt__(self, rhs)    self >  rhs    大于
 __ge__(self, rhs)    self >= rhs    大于等于
 __eq__(self, rhs)    self == rhs    等于
 __ne__(self, rhs)    self != rhs    不等于

位运算符重载:
   方法名              运算符和表达式   说明
 __and__(self, rhs)    self &  rhs    位与
 __or__(self, rhs)     self |  rhs    位或
 __xor__(self, rhs)    self ^  rhs    位异或
 __lshift(self, rhs)   self << rhs    左移
 __rshift(self, rhs)   self >> rhs    右移

反向位运算符重载:
   方法名              运算符和表达式   说明
 __rand__(self, lhs)   lhs &  self     位与
 __ror__(self, lhs)    lhs |  self     位或
 __rxor__(self, lhs)   lhs ^  self     位异或
 __rlshift(self, lhs)  lhs << self     左移
 __rrshift(self, lhs)  lhs >> self     右移

复合赋值位运算符重载:
   方法名              运算符和表达式   说明
 __iand__(self, rhs)    self &=  rhs    位与
 __ior__(self, rhs)     self |=  rhs    位或
 __ixor__(self, rhs)    self ^=  rhs    位异或
 __ilshift(self, rhs)   self <<= rhs    左移
 __irshift(self, rhs)   self >>= rhs    右移

一元运算符的重载
  方法名          运算符和表达式  说明
 __neg__(self)     - self      负号
 __pos__(self)     + self      正号
 __insert__(self)  ~ self      取反

 语法:
   class 类名:
       def __xxx__(self):
           ....
  示例见:
    mylist4.py

in / not in 运算符重载
       方法名             运算符和表达式
 __contains__(self, e)    e in self    

示例见:
  mylist5.py

索引和切片运算符的重载
  L[0]
  L[::2]
 方法名                  运算符和表达式  说明
 __getitem__(self, i)    x = self[i]  取值
 __setitem__(self, i, v) self[i] = v  赋值
 __delitem__(self, i)    del self[i]  删除索引

示例见:
  mylist6.py

slice 构造函数
  作用:
    用于创建一个slice切片对象,此对象存储一个切片
    的起始值,终止值和步长信息,默认都为None
  格式:
    slice(start=None, stop=None, step=None)
  slice对象的属性
    s.start 切片的起始值 默认为None
    s.stop  切片的终止值,默认为None
    s.step  切片的步长,默认为None
  示例见:
    mylist7.py

特性属性 @property
  实现其它语言所拥有的 getter 和 setter 功能

  作用:
    用来模拟一个属性
    通过@property装饰器可以对模拟的属性赋值和取值
      加以控制
  示例见:
    property.py

PEP8编码规范
  文档参见:
    python_base_docs_html/PEP8编码规范.html
  