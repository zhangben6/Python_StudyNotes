1.增加
	1.创建实体对象
	2.通过db.session.add()
	3.提交 
		1.手动提交
			db.session.commit()
		2.自动提交
			app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']=True
2.查询
	1.基于 db.session 的查询
		1.db.session.query()
			会返回一个query对象,类型BaseQuery
			语法:
				db.session.query(实体类|实体类.属性)
		2.查询执行函数
			作用:在基础查询上得到想要的数据
			函数:
				1.all()
				2.first()
				3.first_or_404()
				4.count()
		3.查询过滤器函数
			db.session.query().查询过滤器().查询执行函数()
			1.filter()
				1. filter(User.id==1)
				2. filter(User.id>1)
				3. filter(User.id>1,User.age>30)
				4.from sqlalchemy import or_ 
				  filter(or_(User.id>1,User.age>30))
				5.filter(User.name.like('王%'))
				6.filter(User.addr.in_(['北京','上海','天津','重庆']))
				7.filter(User.age.between(35,50))
			2.filter_by()
				filter_by(id=1)
			3.limit()
				db.session.query().limit(2).offset(5)
				db.session.query().filter().limit().offset()
			4.order_by()
				db.session.query().order_by("id,age desc")
				db.session.query().filter().order_by()
	2.基于 实体类 的查询

	====================================================
	1.查询 - R
		1.聚合查询
			1.基本聚合查询
				from sqlalchemy import func
				# func对象中提供了所有的聚合函数
				db.session.query(func.聚合函数(实体类.属性)).all()
					聚合函数:
						sum() : 求和
						count() : 求非空的数量
						max() : 求最大值
						min() : 求最小值
						avg() : 求平均值
				#查询user表中所有人的平均年龄(uage)是多少??
				db.session.query(func.avg(User.uage)).first()
			2.分组聚合查询
				db.session.query(聚合).group_by('属性名').all()
				练习:
				1.为 User 实体类增加一个属性 isActive(为user表增加一个列isActive),默认值为True
				2.到数据库中随意修改几条数据的 isActive 的值为False
				3.在程序中实现,统计被激活的用户数量以及未被激活的用户数量分别是多少并打印输出
					被激活: isActive = True
			3.带条件的分组聚合
				db.session.query(聚合).filter(条件).group_by(分组).having(分组后条件)
				ex:
					在 user 表中要统计大于16岁的用户的激活人数和未激活人数,并输出大于2人的信息
		2.基于实体类进行查询
			MODELS.query.查询过滤器函数(条件参数).查询执行函数()
			ex:查询user表(User类)中所有的数据
			1.使用 db.session
				db.session.query(User).all()
			2.使用 实体类
				User.query.all()
			ex:查询id为1的user的信息
			1.使用db.session
				db.session.query(User).filter_by(id=1).first()
			2.使用 实体类
				User.query.filter_by(id=1).first()
				User.query.filter(User.id==1).first()
	2.修改 - U(Update)
		1.查
			将要修改的信息查询出来
		2.改
			通过实体对象.属性 = 值
		3.保存
			db.session.add(实体对象)
	3.删除 - D(Delete)
		1.查
			查询出要删除的实体对象
		2.删
			db.session.delete(要删除的实体对象)
	4.重定向 - redirect()
		重定向:在服务器端,指定重新向一个新的地址发送请求
	5.关系映射
		1.一对多
			1.什么是一对多
				A表中的一条数据能够关联到B表中的多条数据
				B表中的一条数据能够关联到A表中的一条数据

				ex:
					1.博客系统中的用户与发表的文章
						1个用户允许发表多篇文章
						1篇文章只能由一个用户发表
					2.老师(Teacher) 与 课程(Course)
						1名老师只能教授一门课程
						一门课程可以被多名老师所教授
						课程(1) : 老师(M)
			2.一对多在数据库中的实现
				依托于 主外键 关系创建
				在"多"表中增加外键 要 引用自"一"表的主键
			3.在 Flask-SQLAlchemy 上的实现
				在"多"实体类中增加对"一"实体类的引用
				1.在 "多" 实体类中:
					增加一个列,引用自"一"表(类)的主键
					外键列名=db.Column(db.Integer,db.ForeignKey('主键表.主键列'))

					ex: 模拟 Course(1) 类 与 Teacher(多) 类
				2.在"一"实体类中:
					增加关联属性以及反向引用关系属性(难点)
					
					1.关联属性:
						在"一"的实体中,要通过哪个<<属性>>来获取到对应的所有的"多"的实体对象们
					2.反向引用关系属性:
						在"多"的实体中,要通过哪个<<属性>>来获取对应的"一"的实体的对象
					
					语法:
						属性名=db.relationship('多实体类名',backref='反向引用关系属性名称',lazy='dynamic')
					ex:
						class Teacher(db.Model):
							xxxx xxxx
							course_id = db.Column(
								db.Integer,
								db.ForeignKey('course.id')
							)

						class Course(db.Model):
							xxx xxx
							#增加关联属性以及反向引用关系属性
							teachers=db.relationship('Teacher',backref='course',lazy='dynamic')



		2.一对一
		3.多对多



course = Course.query.filter_by(id=1)
可以通过 course.teachers 来得到对应的所有的老师的信息




SELECT user.`isActive` AS `user_isActive`, count(user.`isActive`) AS count_1 
FROM user 
WHERE user.uage > %(uage_1)s GROUP BY user.`isActive` 
HAVING count(user.`isActive`) > %(count_2)s









select xxxxxx 
from xxx
where
group by xxx
having xxx


#查询user表中所有的用户的年龄(uage)的和是多少
select sum(uage) as 'sumAge',avg(uage) as 'avgAge' from user



select 
	uid,
	uname,
	uemail,
	uage > (
		select
			uage
		from xxx
		where ...
	)
from user
inner join course
on xxx
where xxx

[
	(Decimal('16.0000'), Decimal('16')), 
	(Decimal('18.0000'), Decimal('18')), 
	(Decimal('38.0000'), Decimal('114'))
]

[
	(16, Decimal('16.0000'), Decimal('16')), 
	(18, Decimal('18.0000'), Decimal('18')), 
	(38, Decimal('38.0000'), Decimal('114'))
]