复习:

1. 关系型数据库和非关系型数据库的比较
   
   * 不是关系模型构建的数据库,不保证数据的一致性,结构   更加灵活自由 
   * 非关系型数据库弥补了关系型数据库在处理高并发数据   时读写效率低的问题
   * 非关系型数据库种类多样,技术不如关系型数据库成熟,   没有统一的操作语句

2. MongoDB特点,安装,基本设置

3. 创建数据库
      use   database

      db.dropDatabase()  删除数据库
      show  dbs  查看数据库

      mongodump     备份
      mongorestore  恢复

      mongostat  数据库监测
      mongotop   数据库读写时长

4. 集合操作

   db.createCollection()  创建集合
   db.collection.insert() 插入数据自动创建集合
   db.getCollection()  获取集合对象
   db.collection.drop()  删除集合
   db.collection.renameCollection()  集合重命名
   show  collections    查看集合

5. 文档
      什么是文档?
      文档数据类型

      插入文档:
          insertOne()
	  insertMany()
	  insert()
	  save()
*****************************************************

查找操作

    mysql:  select ... from table where ... 

   mongodb: db.collection.find(query,field)

   查找集合中所有内容
     db.collection.find() --> select * from table

   find(query,field)
   功能: 查找所有符合条件的数据
   参数: query : 表示筛选条件,是一个键值对文档,默认表               示查找所有内容

             e.g. 查找年龄等于18的文档
	          db.class0.find({age:18})
         
	 field :  表示要查找哪个域,是一个文档键值对.          用0表示不查找的域,1表示查找的域
    
            e.g.  表示不查找_id域,只查找name域
	      db.class0.find({age:18},{_id:0,name:1})
          
	    * 当某个域设置为0时表示该域不查找,其他的   域查找,如果设置为1表示该域查找,其他的不   查找
	    * _id比较特殊,如果不想查找必须设置为0
	    * 普通域0和1不能同时出现
         
    findOne(query,field)
    功能: 查找第一条符合条件的文档
    参数: 同find

    e.g. 查找第一条年龄18的文档
         db.class0.findOne({age:18},{_id:0})


query的筛选功能

操作符 : 使用$符号注明的一个有特殊意义的字符串,用以表          达丰富的含义.  比如 $lt 表示小于

比较操作符:

    $eq  等于  == 

        e.g. 等于18
	     db.class0.find({age:{$eq:18}},{_id:0})

    $lt 小于  <

      e.g. 姓名小于Lily  (字符串也可以比较大小)
	 db.class0.find({name:{$lt:'Lily'}},{_id:0})

    $gt  大于 >
    $lte  小于等于 <=
    $gte  大于等于 >=
    $ne   不等于  !=

    e.g.  查找年龄大于等于18 小于等于20的
    db.class0.find({age:{$gte:18,$lte:20}},{_id:0})

    $in  包含

    e.g.  年龄为14,16,18的
    db.class0.find({age:{$in:[14,16,18]}},{_id:0})

    $nin  不包含

    e.g. 年龄不为14,16,18的
    db.class0.find({age:{$nin:[14,16,18]}},{_id:0})


逻辑操作符

    逻辑与
        1. 在query中多个逗号隔开的键值对即逻辑与关系
           e.g. 年龄17 并且 性别为女
	     db.class0.find({age:17,sex:'w'},{_id:0})
        
	2. $and 表示逻辑与
	   e.g. 年龄17 并且 性别为女
	   db.class0.find({$and:[{age:17},{sex:'w'}]},{_id:0})

    逻辑或  $or

       e.g. 年龄大于17 或者性别为女
       db.class0.find({$or:[{age:{$gt:17}},{sex:'w'}]},{_id:0})
    
    逻辑非  $not

       e.g. 查找年龄不小于18的
       db.class0.find({age:{$not:{$lt:18}}},{_id:0})

    逻辑既不也不  $nor    not (A or B) 

       e.g.  年龄不为18  性别不为女
       db.class0.find({$nor:[{age:18},{sex:'w'}]},{_id:0})
    

    条件混合
        年龄大于18或者年龄小于17  并且要求性别为m
        db.class0.find({$or:[{age:{$gt:18}},{age:{$lt:17}}],sex:'m'},{_id:0})

	年龄大于等于18的男生,或者叫Sunny
	db.class0.find({$or:[{age:{$gte:18},sex:'m'},{name:'Sunny'}]},{_id:0})


数组查找

    数组 : 一组数据的有序集合,使用[]表示
    
    * 有序的 可以用[]取值
    * 数据类型可以不同

    查找数组中包含某一项
       e.g.  查找score数组中包含90的文档
             db.class1.find({score:90},{_id:0})

    $all  数组中同时包含多项
    
    e.g.  数组中同时包含90  88 的
      db.class1.find({score:{$all:[90,88]}},{_id:0})

    $size  根据数组项目查找
    
    e.g.  查找数组中包含3项的文档
    db.class1.find({score:{$size:3}},{_id:0})

    $slice  选择数组的查询部分 (用于field参数)
    
    e.g.  显示数组中的前两项
    db.class1.find({},{_id:0,score:{$slice:2}})

    e.g.  跳过第一项显示后面两项
    db.class1.find({},{_id:0,score:{$slice:[1,2]}})


其他查找操作符	

   $exists 判断一个域是否存在

   e.g. 查找不存在sex域的文档 (true表示存在false表示                              不存在)
     db.class0.find({sex:{$exists:false}},{_id:0})
    
   $mod  通过除数和余数筛选

   e.g.  筛选年龄为单数的文档 
   db.class0.find({age:{$mod:[2,1]}},{_id:0})

   $regex  根据正则表达式筛选
   
   e.g.  简单的正则表达式筛选中间带o的
   db.class0.find({name:{$regex:/.*o.*/}},{_id:0})
  
   $type  根据数据类型筛选

   e.g 查找age域值类型为 1 的
   db.class1.find({age:{$type:1}},{_id:0})

   * 类型和数据联系参加数据类型表
   * 通过 www.mongodb.com --> docs查找新的操作符用法


数据处理函数

    db.collection.distinct(field)
    功能: 获取某个域的取值范围

    e.g.  查看age域的取值情况
          db.class0.distinct('age')


    pretty()
    功能: 将find查询结果格式化显示
    
    e.g.  格式化显示查询结果
          db.class0.find().pretty()

    limit(n)
    功能: 显示查询结果的前n条

    e.g. 显示查询结果前4条
        db.class0.find({},{_id:0}).limit(4)

    skip(n)
    功能: 跳过前n条显示后面的内容

    e.g. 跳过前4条显示后面的内容
         db.class0.find({},{_id:0}).skip(4)

    count()
    功能 : 统计查询结果数量

    e.g.  统计年龄18的文档个数 (写删选条件)
    db.class0.find({age:18},{_id:0}).count()


    sort({field:1/-1})
    功能 : 对查找结果按照某个域的值排序 1表示升序 -1        降序

    e.g.  查找结果按照年龄降序排列
    db.class0.find({},{_id:0,sex:0}).sort({age:-1})
   
    * 复合排序
    
    e.g.  当第一排序项相同时按照第二排序项排序
    db.class0.find({},{_id:0,sex:0}).sort({age:1,name:1})

  
    查询结果操作函数可以连续条用
        
	* 当前一个函数返回的仍然是查询结果集合,则可以继续调用函数操作

	e.g. 查找年龄最大的三个文档
	 db.class0.find({},{_id:0,sex:0}).sort({age:-1}).limit(3)

    可以通过序列号直接获取查询结果某一项

    e.g. 获取第三个查询结果
    db.class0.find({},{_id:0,sex:0})[2]


练习
1. 创建数据库 名字 grade
	user  grade
2. 在数据库中创建集合 class
3. 集合中插入若干数据,格式如下
   {name:xxx,age:xx,sex:'m',hobby:['xxx','xxx']}
   age: 7-15岁之间
   hobby: draw dance  running  sing  football
          basketball   computer   python
   
   db.class.insert({name:'小明',age:8,sex:'m',hobby:['draw','sing']})

4. 查找练习

   查看班级所有人信息
	db.class.find()

   查看班级中年龄为8岁的学生信息
	db.class.find({age:8})

   查看年龄大于10岁的学生信息
	db.class.find({age:{$gt:10}})

   查看年龄在10-14岁之间的学生信息
	db.class.find({age:{$gte:10,$lte:14})

   查看年龄为9岁且喜欢画画的女生
	db.class.find({age:9,hobby:'draw',sex:'w'})

   查看年龄小于8岁或者大于12的学生
	db.class.find({$or:[{age:{$lt:8}},{age:{$gt:12}}]})

   查看年龄为9岁或者11岁的学生
	db.class.find({age:{$in:[9,11]}})

   找到有两项兴趣的学生
	db.class.find({hobby:{$size:2}})

   找到喜欢计算机的学生
	db.class.find({hobby:'computer'})

   找到既喜欢跳舞又喜欢画画的学生
       db.class.find({hobby:{$all:['dance','draw']}})

   统计兴趣爱好有三项的学生人数
	db.class.find({hobby:{$size:3}}).count()

   找到班级中年龄第二大的同学
      db.class.find().sort({age:-1}).skip(1).limit(1)

   查看班级中兴趣爱好的涵盖范围
      db.class.distinct('hobby')

   找到班级中年龄最小的三个男生
      db.class.find({sex:'m'}).sort({age:1}).limit(3)


删除文档
   mysql :  delete  from  table  where ...

   mongo : db.collection.deleteOne(query)
   
   deleteOne(query)
   功能 : 删除第一条符合条件的文档
   参数 : 筛选条件  用法同find query

       e.g. 删除第一条年龄为18岁的文档
            db.class0.deleteOne({age:18})
   
   deleteMany(query)
   功能: 删除所有符合条件的文档
   参数: query

       e.g. 删除所有姓名以L开头的文档
       db.class0.deleteMany({name:{$regex:/L.*/}})
 
       * 如果筛选条件为空,表示删除集合中所有文档
         
	 e.g. 删除spider中所有内容
         db.spider.deleteMany({})
    
    remove(query,justOne)
    功能: 删除文档
    参数: query
          justOne 默认为false此时remove==deleteMany
	          设置为true 此时remove==deleteOne

     e.g. 删除第一个年龄为18的文档
          db.class0.remove({age:18},true)


    findOneAndDelete(query)
    功能: 查找第一个符合条件的文档并且删除
    参数: query
    返回: 找到的文档

    e.g. 查找不存在sex域的文档并且删除
     db.class0.findOneAndDelete({sex:{$exists:false}})


删除练习

使用grade数据库

删除年龄小于8岁或者大于15岁的同学
deleteMany({$or:[{age:{$lt:8}},{age:{$gt:15}}]})
删除兴趣爱好只有1项的同学
deleteMany({hobby:{$size:1}})
查找喜欢Python的同学并删除
findOneAndDelete({hobby:'python'})


修改操作

mysql :  update  table  set...  where...

mongo :  db.collection.updateOne(query,update,upsert)

updateOne(query,update,upsert)
功能: 修改第一个符合条件的文档
参数: query  数据筛选  
      update  要修改的数据,需要配合修改操作符使用
      upsert  bool值,默认为false表示如果没有筛选到文         档则不执行操作.如果设置为true则没有筛        选到文档,根据query和update插入新的文档

      e.g. 修改han的性别为w
          db.class0.updateOne({name:'Han'},{$set:{sex:'w'}})
     
      e.g. 如果没有找到Levi 则upsert表示插入新文档
          db.class0.updateOne({name:'Levi'},{$set:{age:16}},{upsert:true})

updateMany(query,update,upsert)
功能 : 修改所有符合条件的文档
参数 : 同updateOne

e.g. 修改所有年龄为16的 为 19
db.class0.updateMany({age:16},{$set:{age:19}})

update(query,update,upsert,multi)
功能: 修改文档
参数: query,update 同updateOne
      upsert  bool值  true表示插入新文档
      multi   默认为false 此时同updateOne
              设置为true  同updateMany

e.g. 修改所有性别为m的年龄为19
db.class0.update({sex:'m'},{$set:{age:19}},true,true)

findOneAndUpdate(query,update)
功能: 查找一个文档并修改
参数: query   查找文档
      update  修改内容
返回 : 修改前的文档

e.g.  查找并修改一个文档
 db.class0.findOneAndUpdate({name:"Levi"},{$set:{age:16}})

findOneAndReplace(query,document)
功能: 查找一个文档并替换
参数: query 筛选条件
      document 替换的文档
返回: 原来的文档

e.g. 替换姓名为Abby的文档
db.class0.findOneAndReplace({name:'Abby'},{name:'Lily',age:15,sex:'w'})

作业 :  复习mongodb的增删改查
      将'三国'建立mongo数据库,进行响应的增删改查练习

